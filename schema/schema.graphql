# source: https://api-eu-central-1.graphcms.com/v2/cke1fiaby1c7f01z19a7ud3ag/master
# timestamp: Tue Sep 15 2020 14:08:22 GMT+0200 (Central European Summer Time)

directive @mark(
  """Marks if field is localized"""
  localized: Boolean

  """Marks if value is default"""
  default: Boolean

  """Marks if the locale is a part of the default fallback"""
  fallback: Boolean

  """Ordered list of fallback locales"""
  fallbackLocales: [String!]

  """Marks the pageInfo"""
  pageInfo: Boolean

  """Marks an aggregate type"""
  aggregate: Boolean

  """Marks a countable type"""
  countable: Boolean

  """Marks an edge type"""
  edge: Boolean

  """Marks a locale enum"""
  locale: Boolean

  """Marks asset url handler"""
  url: Boolean

  """Marks type of mutation kind"""
  mutationKind: _MutationKind

  """Marks kind of mutation input field"""
  mutationInputFieldKind: _MutationInputFieldKind

  """Marks filter and links to parent type"""
  filter: String

  """Marks filter kind"""
  filterKind: _FilterKind

  """Marks if corresponding field is list"""
  filterIsList: Boolean

  """Marks order by"""
  order: Boolean

  """Marks order direction"""
  orderDirection: _OrderDirection

  """Link to the Main type of the connection"""
  connection: String

  """Marks localizations field"""
  localizations: Boolean

  """Marks versions field on model"""
  modelVersions: Boolean

  """Marks document version field on Query"""
  documentVersion: Boolean

  """Marks stages field"""
  stages: Boolean

  """Specifies system createdAt field"""
  createdAtField: String

  """Specifies system updatedAt field"""
  updatedAtField: String

  """Specifies relation input kind"""
  relationInputKind: _RelationInputKind

  """
  Specifies relation kind (e.g. union relation or regular field relation)
  """
  relationKind: _RelationKind

  """Specifies relation input cardinality"""
  relationInputCardinality: _RelationInputCardinality

  """Specifies relation input cardinality of reverse side"""
  reverseRelationInputCardinality: _RelationInputCardinality

  """Specifies model create input type"""
  createInputType: String

  """Specifies model create localization type"""
  createLocalizationInputType: String

  """Specifies GraphCMS field type"""
  fieldType: String

  """Specifies WhereUniqueInput type name"""
  whereUniqueInput: String

  """Specifies whether type is connect input"""
  isConnectInput: Boolean

  """
  Specifies relation input to be for abstract member type, not known master / origin side
  """
  isMemberInput: Boolean

  """Specifies union type name"""
  unionType: Boolean

  """Specifies model a type is part of"""
  model: String

  """Specifies mode of system DateTime fields"""
  systemDateTimeFieldVariation: _SystemDateTimeFieldVariation

  """
  If versioned, documents of this model will be able to hold this amount of versions per stage
  """
  versionRetentionCount: Int

  """If versioned, on publishing versions older than x days will be dropped"""
  versionRetentionPeriod: Int

  """Adds field validations"""
  validations: String

  """The model's storage ID"""
  storageId: String
) on OBJECT | FIELD_DEFINITION | ENUM_VALUE | ENUM | INPUT_FIELD_DEFINITION | INPUT_OBJECT | ARGUMENT_DEFINITION

directive @psql(
  """postgres table name"""
  table: String

  """postgres localization table name"""
  localizationTable: String

  """postgres column name"""
  column: [String!]

  """hardcoded postgres id value for enums"""
  id: String

  """postgres join on name"""
  join: [String!]

  """Specifies column for system id field"""
  idColumn: String

  """Specifies column for native sorting for relational fields"""
  prio: String

  """Specifies columns for union member fields"""
  memberColumns: [String!]

  """Specifies system updatedAt column"""
  updatedAtColumn: String
) on OBJECT | FIELD_DEFINITION | ENUM_VALUE | INPUT_FIELD_DEFINITION | ENUM | INPUT_OBJECT | ARGUMENT_DEFINITION

directive @permission(
  """
  is usage of that field allowed if not overwritten will also be set for subfields
  """
  allowed: Boolean

  """stages that are allowed to be used by this subtree"""
  allowedStages: [Locale!]
) on FIELD_DEFINITION

enum _FilterKind {
  search
  AND
  OR
  NOT
  eq
  eq_not
  in
  not_in
  lt
  lte
  gt
  gte
  contains
  not_contains
  starts_with
  not_starts_with
  ends_with
  not_ends_with
  contains_all
  contains_some
  contains_none
  relational_single
  relational_every
  relational_some
  relational_none
}

enum _MutationInputFieldKind {
  scalar
  richText
  enum
  relation
  union
  virtual
}

enum _MutationKind {
  create
  publish
  unpublish
  update
  upsert
  delete
  updateMany
  publishMany
  unpublishMany
  deleteMany
}

enum _OrderDirection {
  asc
  desc
}

enum _RelationInputCardinality {
  one
  many
}

enum _RelationInputKind {
  create
  update
}

enum _RelationKind {
  regular
  union
}

enum _SystemDateTimeFieldVariation {
  base
  localization
  combined
}

type Aggregate {
  count: Int!
}

"""Asset system model"""
type Asset implements Node {
  """System stage field"""
  stage: Stage!

  """System Locale field"""
  locale: Locale!

  """Get the other localizations for this document"""
  localizations(
    """Potential locales that should be returned"""
    locales: [Locale!]! = [en]

    """Decides if the current locale should be included or not"""
    includeCurrent: Boolean! = false
  ): [Asset!]!

  """Get the document in other stages"""
  documentInStages(
    """Potential stages that should be returned"""
    stages: [Stage!]! = [PUBLISHED, DRAFT]

    """Decides if the current stage should be included or not"""
    includeCurrent: Boolean! = false

    """
    Decides if the documents should match the parent documents locale or should use the fallback order defined in the tree
    """
    inheritLocale: Boolean! = false
  ): [Asset!]!

  """The unique identifier"""
  id: ID!

  """The time the document was created"""
  createdAt(
    """
    Variation of DateTime field to return, allows value from base document,
    current localization, or combined by returning the newer value of both
    """
    variation: SystemDateTimeFieldVariation! = COMBINED
  ): DateTime!

  """The time the document was updated"""
  updatedAt(
    """
    Variation of DateTime field to return, allows value from base document,
    current localization, or combined by returning the newer value of both
    """
    variation: SystemDateTimeFieldVariation! = COMBINED
  ): DateTime!

  """The time the document was published. Null on documents in draft stage."""
  publishedAt(
    """
    Variation of DateTime field to return, allows value from base document,
    current localization, or combined by returning the newer value of both
    """
    variation: SystemDateTimeFieldVariation! = COMBINED
  ): DateTime

  """The file handle"""
  handle: String!

  """The file name"""
  fileName: String!

  """The height of the file"""
  height: Float

  """The file width"""
  width: Float

  """The file size"""
  size: Float

  """The mime type of the file"""
  mimeType: String
  pizzaImage(where: PizzaWhereInput, orderBy: PizzaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Pizza!]!
  attribution: String

  """List of Asset versions"""
  history(
    limit: Int! = 10
    skip: Int! = 0

    """
    This is optional and can be used to fetch the document version history for a specific stage instead of the current one
    """
    stageOverride: Stage
  ): [Version!]!

  """Get the url for the asset with provided transformations applied."""
  url(transformation: AssetTransformationInput): String!
}

input AssetConnectInput {
  """Document to connect"""
  where: AssetWhereUniqueInput!

  """
  Allow to specify document position in list of connected documents, will default to appending at end of list
  """
  position: ConnectPositionInput
}

"""A connection to a list of items."""
type AssetConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AssetEdge!]!
  aggregate: Aggregate!
}

input AssetCreateInput {
  createdAt: DateTime
  updatedAt: DateTime
  handle: String!
  fileName: String!
  height: Float
  width: Float
  size: Float
  mimeType: String
  pizzaImage: PizzaCreateManyInlineInput
  attribution: String

  """
  Inline mutations for managing document localizations excluding the default locale
  """
  localizations: AssetCreateLocalizationsInput
}

input AssetCreateLocalizationDataInput {
  createdAt: DateTime
  updatedAt: DateTime
  handle: String!
  fileName: String!
  height: Float
  width: Float
  size: Float
  mimeType: String
}

input AssetCreateLocalizationInput {
  """Localization input"""
  data: AssetCreateLocalizationDataInput!
  locale: Locale!
}

input AssetCreateLocalizationsInput {
  """Create localizations for the newly-created document"""
  create: [AssetCreateLocalizationInput!]
}

input AssetCreateManyInlineInput {
  """Create and connect multiple existing Asset documents"""
  create: [AssetCreateInput!]

  """Connect multiple existing Asset documents"""
  connect: [AssetWhereUniqueInput!]
}

input AssetCreateOneInlineInput {
  """Create and connect one Asset document"""
  create: AssetCreateInput

  """Connect one existing Asset document"""
  connect: AssetWhereUniqueInput
}

"""An edge in a connection."""
type AssetEdge {
  """The item at the end of the edge."""
  node: Asset!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Identifies documents"""
input AssetManyWhereInput {
  """Contains search across all appropriate fields."""
  _search: String

  """Logical AND on all given filters."""
  AND: [AssetWhereInput!]

  """Logical OR on all given filters."""
  OR: [AssetWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AssetWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  publishedAt: DateTime

  """All values that are not equal to given value."""
  publishedAt_not: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime!]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime
  pizzaImage_every: PizzaWhereInput
  pizzaImage_some: PizzaWhereInput
  pizzaImage_none: PizzaWhereInput
  attribution: String

  """All values that are not equal to given value."""
  attribution_not: String

  """All values that are contained in given list."""
  attribution_in: [String!]

  """All values that are not contained in given list."""
  attribution_not_in: [String!]

  """All values containing the given string."""
  attribution_contains: String

  """All values not containing the given string."""
  attribution_not_contains: String

  """All values starting with the given string."""
  attribution_starts_with: String

  """All values not starting with the given string."""
  attribution_not_starts_with: String

  """All values ending with the given string."""
  attribution_ends_with: String

  """All values not ending with the given string"""
  attribution_not_ends_with: String
}

enum AssetOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  publishedAt_ASC
  publishedAt_DESC
  handle_ASC
  handle_DESC
  fileName_ASC
  fileName_DESC
  height_ASC
  height_DESC
  width_ASC
  width_DESC
  size_ASC
  size_DESC
  mimeType_ASC
  mimeType_DESC
  attribution_ASC
  attribution_DESC
}

"""Transformations for Assets"""
input AssetTransformationInput {
  image: ImageTransformationInput
  document: DocumentTransformationInput

  """Pass true if you want to validate the passed transformation parameters"""
  validateOptions: Boolean = false
}

input AssetUpdateInput {
  handle: String
  fileName: String
  height: Float
  width: Float
  size: Float
  mimeType: String
  pizzaImage: PizzaUpdateManyInlineInput
  attribution: String

  """Manage document localizations"""
  localizations: AssetUpdateLocalizationsInput
}

input AssetUpdateLocalizationDataInput {
  handle: String
  fileName: String
  height: Float
  width: Float
  size: Float
  mimeType: String
}

input AssetUpdateLocalizationInput {
  data: AssetUpdateLocalizationDataInput!
  locale: Locale!
}

input AssetUpdateLocalizationsInput {
  """Localizations to create"""
  create: [AssetCreateLocalizationInput!]

  """Localizations to update"""
  update: [AssetUpdateLocalizationInput!]
  upsert: [AssetUpsertLocalizationInput!]

  """Localizations to delete"""
  delete: [Locale!]
}

input AssetUpdateManyInlineInput {
  """Create and connect multiple Asset documents"""
  create: [AssetCreateInput!]

  """Connect multiple existing Asset documents"""
  connect: [AssetConnectInput!]

  """
  Override currently-connected documents with multiple existing Asset documents
  """
  set: [AssetWhereUniqueInput!]

  """Update multiple Asset documents"""
  update: [AssetUpdateWithNestedWhereUniqueInput!]

  """Upsert multiple Asset documents"""
  upsert: [AssetUpsertWithNestedWhereUniqueInput!]

  """Disconnect multiple Asset documents"""
  disconnect: [AssetWhereUniqueInput!]

  """Delete multiple Asset documents"""
  delete: [AssetWhereUniqueInput!]
}

input AssetUpdateManyInput {
  fileName: String
  height: Float
  width: Float
  size: Float
  mimeType: String
  attribution: String

  """Optional updates to localizations"""
  localizations: AssetUpdateManyLocalizationsInput
}

input AssetUpdateManyLocalizationDataInput {
  fileName: String
  height: Float
  width: Float
  size: Float
  mimeType: String
}

input AssetUpdateManyLocalizationInput {
  data: AssetUpdateManyLocalizationDataInput!
  locale: Locale!
}

input AssetUpdateManyLocalizationsInput {
  """Localizations to update"""
  update: [AssetUpdateManyLocalizationInput!]
}

input AssetUpdateManyWithNestedWhereInput {
  """Document search"""
  where: AssetWhereInput!

  """Update many input"""
  data: AssetUpdateManyInput!
}

input AssetUpdateOneInlineInput {
  """Create and connect one Asset document"""
  create: AssetCreateInput

  """Update single Asset document"""
  update: AssetUpdateWithNestedWhereUniqueInput

  """Upsert single Asset document"""
  upsert: AssetUpsertWithNestedWhereUniqueInput

  """Connect existing Asset document"""
  connect: AssetWhereUniqueInput

  """Disconnect currently connected Asset document"""
  disconnect: Boolean

  """Delete currently connected Asset document"""
  delete: Boolean
}

input AssetUpdateWithNestedWhereUniqueInput {
  """Unique document search"""
  where: AssetWhereUniqueInput!

  """Document to update"""
  data: AssetUpdateInput!
}

input AssetUpsertInput {
  """Create document if it didn't exist"""
  create: AssetCreateInput!

  """Update document if it exists"""
  update: AssetUpdateInput!
}

input AssetUpsertLocalizationInput {
  update: AssetUpdateLocalizationDataInput!
  create: AssetCreateLocalizationDataInput!
  locale: Locale!
}

input AssetUpsertWithNestedWhereUniqueInput {
  """Unique document search"""
  where: AssetWhereUniqueInput!

  """Upsert data"""
  data: AssetUpsertInput!
}

"""Identifies documents"""
input AssetWhereInput {
  """Contains search across all appropriate fields."""
  _search: String

  """Logical AND on all given filters."""
  AND: [AssetWhereInput!]

  """Logical OR on all given filters."""
  OR: [AssetWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AssetWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  publishedAt: DateTime

  """All values that are not equal to given value."""
  publishedAt_not: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime!]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime
  handle: String

  """All values that are not equal to given value."""
  handle_not: String

  """All values that are contained in given list."""
  handle_in: [String!]

  """All values that are not contained in given list."""
  handle_not_in: [String!]

  """All values containing the given string."""
  handle_contains: String

  """All values not containing the given string."""
  handle_not_contains: String

  """All values starting with the given string."""
  handle_starts_with: String

  """All values not starting with the given string."""
  handle_not_starts_with: String

  """All values ending with the given string."""
  handle_ends_with: String

  """All values not ending with the given string"""
  handle_not_ends_with: String
  fileName: String

  """All values that are not equal to given value."""
  fileName_not: String

  """All values that are contained in given list."""
  fileName_in: [String!]

  """All values that are not contained in given list."""
  fileName_not_in: [String!]

  """All values containing the given string."""
  fileName_contains: String

  """All values not containing the given string."""
  fileName_not_contains: String

  """All values starting with the given string."""
  fileName_starts_with: String

  """All values not starting with the given string."""
  fileName_not_starts_with: String

  """All values ending with the given string."""
  fileName_ends_with: String

  """All values not ending with the given string"""
  fileName_not_ends_with: String
  height: Float

  """All values that are not equal to given value."""
  height_not: Float

  """All values that are contained in given list."""
  height_in: [Float!]

  """All values that are not contained in given list."""
  height_not_in: [Float!]

  """All values less than the given value."""
  height_lt: Float

  """All values less than or equal the given value."""
  height_lte: Float

  """All values greater than the given value."""
  height_gt: Float

  """All values greater than or equal the given value."""
  height_gte: Float
  width: Float

  """All values that are not equal to given value."""
  width_not: Float

  """All values that are contained in given list."""
  width_in: [Float!]

  """All values that are not contained in given list."""
  width_not_in: [Float!]

  """All values less than the given value."""
  width_lt: Float

  """All values less than or equal the given value."""
  width_lte: Float

  """All values greater than the given value."""
  width_gt: Float

  """All values greater than or equal the given value."""
  width_gte: Float
  size: Float

  """All values that are not equal to given value."""
  size_not: Float

  """All values that are contained in given list."""
  size_in: [Float!]

  """All values that are not contained in given list."""
  size_not_in: [Float!]

  """All values less than the given value."""
  size_lt: Float

  """All values less than or equal the given value."""
  size_lte: Float

  """All values greater than the given value."""
  size_gt: Float

  """All values greater than or equal the given value."""
  size_gte: Float
  mimeType: String

  """All values that are not equal to given value."""
  mimeType_not: String

  """All values that are contained in given list."""
  mimeType_in: [String!]

  """All values that are not contained in given list."""
  mimeType_not_in: [String!]

  """All values containing the given string."""
  mimeType_contains: String

  """All values not containing the given string."""
  mimeType_not_contains: String

  """All values starting with the given string."""
  mimeType_starts_with: String

  """All values not starting with the given string."""
  mimeType_not_starts_with: String

  """All values ending with the given string."""
  mimeType_ends_with: String

  """All values not ending with the given string"""
  mimeType_not_ends_with: String
  pizzaImage_every: PizzaWhereInput
  pizzaImage_some: PizzaWhereInput
  pizzaImage_none: PizzaWhereInput
  attribution: String

  """All values that are not equal to given value."""
  attribution_not: String

  """All values that are contained in given list."""
  attribution_in: [String!]

  """All values that are not contained in given list."""
  attribution_not_in: [String!]

  """All values containing the given string."""
  attribution_contains: String

  """All values not containing the given string."""
  attribution_not_contains: String

  """All values starting with the given string."""
  attribution_starts_with: String

  """All values not starting with the given string."""
  attribution_not_starts_with: String

  """All values ending with the given string."""
  attribution_ends_with: String

  """All values not ending with the given string"""
  attribution_not_ends_with: String
}

"""References Asset record uniquely"""
input AssetWhereUniqueInput {
  id: ID
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Cheese implements Node {
  """System stage field"""
  stage: Stage!

  """Get the document in other stages"""
  documentInStages(
    """Potential stages that should be returned"""
    stages: [Stage!]! = [PUBLISHED, DRAFT]

    """Decides if the current stage should be included or not"""
    includeCurrent: Boolean! = false

    """
    Decides if the documents should match the parent documents locale or should use the fallback order defined in the tree
    """
    inheritLocale: Boolean! = false
  ): [Cheese!]!

  """The unique identifier"""
  id: ID!

  """The time the document was created"""
  createdAt: DateTime!

  """The time the document was updated"""
  updatedAt: DateTime!

  """The time the document was published. Null on documents in draft stage."""
  publishedAt: DateTime
  pizza(where: PizzaWhereInput, orderBy: PizzaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Pizza!]!
  title: String
  nonDairy: Boolean

  """List of Cheese versions"""
  history(
    limit: Int! = 10
    skip: Int! = 0

    """
    This is optional and can be used to fetch the document version history for a specific stage instead of the current one
    """
    stageOverride: Stage
  ): [Version!]!
}

input CheeseConnectInput {
  """Document to connect"""
  where: CheeseWhereUniqueInput!

  """
  Allow to specify document position in list of connected documents, will default to appending at end of list
  """
  position: ConnectPositionInput
}

"""A connection to a list of items."""
type CheeseConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CheeseEdge!]!
  aggregate: Aggregate!
}

input CheeseCreateInput {
  createdAt: DateTime
  updatedAt: DateTime
  pizza: PizzaCreateManyInlineInput
  title: String
  nonDairy: Boolean
}

input CheeseCreateManyInlineInput {
  """Create and connect multiple existing Cheese documents"""
  create: [CheeseCreateInput!]

  """Connect multiple existing Cheese documents"""
  connect: [CheeseWhereUniqueInput!]
}

input CheeseCreateOneInlineInput {
  """Create and connect one Cheese document"""
  create: CheeseCreateInput

  """Connect one existing Cheese document"""
  connect: CheeseWhereUniqueInput
}

"""An edge in a connection."""
type CheeseEdge {
  """The item at the end of the edge."""
  node: Cheese!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Identifies documents"""
input CheeseManyWhereInput {
  """Contains search across all appropriate fields."""
  _search: String

  """Logical AND on all given filters."""
  AND: [CheeseWhereInput!]

  """Logical OR on all given filters."""
  OR: [CheeseWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CheeseWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  publishedAt: DateTime

  """All values that are not equal to given value."""
  publishedAt_not: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime!]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime
  pizza_every: PizzaWhereInput
  pizza_some: PizzaWhereInput
  pizza_none: PizzaWhereInput
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string"""
  title_not_ends_with: String
  nonDairy: Boolean

  """All values that are not equal to given value."""
  nonDairy_not: Boolean
}

enum CheeseOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  publishedAt_ASC
  publishedAt_DESC
  title_ASC
  title_DESC
  nonDairy_ASC
  nonDairy_DESC
}

input CheeseUpdateInput {
  pizza: PizzaUpdateManyInlineInput
  title: String
  nonDairy: Boolean
}

input CheeseUpdateManyInlineInput {
  """Create and connect multiple Cheese documents"""
  create: [CheeseCreateInput!]

  """Connect multiple existing Cheese documents"""
  connect: [CheeseConnectInput!]

  """
  Override currently-connected documents with multiple existing Cheese documents
  """
  set: [CheeseWhereUniqueInput!]

  """Update multiple Cheese documents"""
  update: [CheeseUpdateWithNestedWhereUniqueInput!]

  """Upsert multiple Cheese documents"""
  upsert: [CheeseUpsertWithNestedWhereUniqueInput!]

  """Disconnect multiple Cheese documents"""
  disconnect: [CheeseWhereUniqueInput!]

  """Delete multiple Cheese documents"""
  delete: [CheeseWhereUniqueInput!]
}

input CheeseUpdateManyInput {
  title: String
  nonDairy: Boolean
}

input CheeseUpdateManyWithNestedWhereInput {
  """Document search"""
  where: CheeseWhereInput!

  """Update many input"""
  data: CheeseUpdateManyInput!
}

input CheeseUpdateOneInlineInput {
  """Create and connect one Cheese document"""
  create: CheeseCreateInput

  """Update single Cheese document"""
  update: CheeseUpdateWithNestedWhereUniqueInput

  """Upsert single Cheese document"""
  upsert: CheeseUpsertWithNestedWhereUniqueInput

  """Connect existing Cheese document"""
  connect: CheeseWhereUniqueInput

  """Disconnect currently connected Cheese document"""
  disconnect: Boolean

  """Delete currently connected Cheese document"""
  delete: Boolean
}

input CheeseUpdateWithNestedWhereUniqueInput {
  """Unique document search"""
  where: CheeseWhereUniqueInput!

  """Document to update"""
  data: CheeseUpdateInput!
}

input CheeseUpsertInput {
  """Create document if it didn't exist"""
  create: CheeseCreateInput!

  """Update document if it exists"""
  update: CheeseUpdateInput!
}

input CheeseUpsertWithNestedWhereUniqueInput {
  """Unique document search"""
  where: CheeseWhereUniqueInput!

  """Upsert data"""
  data: CheeseUpsertInput!
}

"""Identifies documents"""
input CheeseWhereInput {
  """Contains search across all appropriate fields."""
  _search: String

  """Logical AND on all given filters."""
  AND: [CheeseWhereInput!]

  """Logical OR on all given filters."""
  OR: [CheeseWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CheeseWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  publishedAt: DateTime

  """All values that are not equal to given value."""
  publishedAt_not: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime!]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime
  pizza_every: PizzaWhereInput
  pizza_some: PizzaWhereInput
  pizza_none: PizzaWhereInput
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string"""
  title_not_ends_with: String
  nonDairy: Boolean

  """All values that are not equal to given value."""
  nonDairy_not: Boolean
}

"""References Cheese record uniquely"""
input CheeseWhereUniqueInput {
  id: ID
}

"""
Representing a color value comprising of HEX, RGBA and css color values
"""
type Color {
  hex: Hex!
  rgba: RGBA!
  css: String!
}

"""
Accepts either HEX or RGBA color value. At least one of hex or rgba value should be passed. If both are passed RGBA is used.
"""
input ColorInput {
  hex: Hex
  rgba: RGBAInput
}

input ConnectPositionInput {
  """Connect document after specified document"""
  after: ID

  """Connect document before specified document"""
  before: ID

  """Connect document at first position"""
  start: Boolean

  """Connect document at last position"""
  end: Boolean
}

type Crust implements Node {
  """System stage field"""
  stage: Stage!

  """Get the document in other stages"""
  documentInStages(
    """Potential stages that should be returned"""
    stages: [Stage!]! = [PUBLISHED, DRAFT]

    """Decides if the current stage should be included or not"""
    includeCurrent: Boolean! = false

    """
    Decides if the documents should match the parent documents locale or should use the fallback order defined in the tree
    """
    inheritLocale: Boolean! = false
  ): [Crust!]!

  """The unique identifier"""
  id: ID!

  """The time the document was created"""
  createdAt: DateTime!

  """The time the document was updated"""
  updatedAt: DateTime!

  """The time the document was published. Null on documents in draft stage."""
  publishedAt: DateTime
  pizzas(where: PizzaWhereInput, orderBy: PizzaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Pizza!]!
  title: String

  """List of Crust versions"""
  history(
    limit: Int! = 10
    skip: Int! = 0

    """
    This is optional and can be used to fetch the document version history for a specific stage instead of the current one
    """
    stageOverride: Stage
  ): [Version!]!
}

input CrustConnectInput {
  """Document to connect"""
  where: CrustWhereUniqueInput!

  """
  Allow to specify document position in list of connected documents, will default to appending at end of list
  """
  position: ConnectPositionInput
}

"""A connection to a list of items."""
type CrustConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CrustEdge!]!
  aggregate: Aggregate!
}

input CrustCreateInput {
  createdAt: DateTime
  updatedAt: DateTime
  pizzas: PizzaCreateManyInlineInput
  title: String
}

input CrustCreateManyInlineInput {
  """Create and connect multiple existing Crust documents"""
  create: [CrustCreateInput!]

  """Connect multiple existing Crust documents"""
  connect: [CrustWhereUniqueInput!]
}

input CrustCreateOneInlineInput {
  """Create and connect one Crust document"""
  create: CrustCreateInput

  """Connect one existing Crust document"""
  connect: CrustWhereUniqueInput
}

"""An edge in a connection."""
type CrustEdge {
  """The item at the end of the edge."""
  node: Crust!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Identifies documents"""
input CrustManyWhereInput {
  """Contains search across all appropriate fields."""
  _search: String

  """Logical AND on all given filters."""
  AND: [CrustWhereInput!]

  """Logical OR on all given filters."""
  OR: [CrustWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CrustWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  publishedAt: DateTime

  """All values that are not equal to given value."""
  publishedAt_not: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime!]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime
  pizzas_every: PizzaWhereInput
  pizzas_some: PizzaWhereInput
  pizzas_none: PizzaWhereInput
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string"""
  title_not_ends_with: String
}

enum CrustOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  publishedAt_ASC
  publishedAt_DESC
  title_ASC
  title_DESC
}

input CrustUpdateInput {
  pizzas: PizzaUpdateManyInlineInput
  title: String
}

input CrustUpdateManyInlineInput {
  """Create and connect multiple Crust documents"""
  create: [CrustCreateInput!]

  """Connect multiple existing Crust documents"""
  connect: [CrustConnectInput!]

  """
  Override currently-connected documents with multiple existing Crust documents
  """
  set: [CrustWhereUniqueInput!]

  """Update multiple Crust documents"""
  update: [CrustUpdateWithNestedWhereUniqueInput!]

  """Upsert multiple Crust documents"""
  upsert: [CrustUpsertWithNestedWhereUniqueInput!]

  """Disconnect multiple Crust documents"""
  disconnect: [CrustWhereUniqueInput!]

  """Delete multiple Crust documents"""
  delete: [CrustWhereUniqueInput!]
}

input CrustUpdateManyInput {
  title: String
}

input CrustUpdateManyWithNestedWhereInput {
  """Document search"""
  where: CrustWhereInput!

  """Update many input"""
  data: CrustUpdateManyInput!
}

input CrustUpdateOneInlineInput {
  """Create and connect one Crust document"""
  create: CrustCreateInput

  """Update single Crust document"""
  update: CrustUpdateWithNestedWhereUniqueInput

  """Upsert single Crust document"""
  upsert: CrustUpsertWithNestedWhereUniqueInput

  """Connect existing Crust document"""
  connect: CrustWhereUniqueInput

  """Disconnect currently connected Crust document"""
  disconnect: Boolean

  """Delete currently connected Crust document"""
  delete: Boolean
}

input CrustUpdateWithNestedWhereUniqueInput {
  """Unique document search"""
  where: CrustWhereUniqueInput!

  """Document to update"""
  data: CrustUpdateInput!
}

input CrustUpsertInput {
  """Create document if it didn't exist"""
  create: CrustCreateInput!

  """Update document if it exists"""
  update: CrustUpdateInput!
}

input CrustUpsertWithNestedWhereUniqueInput {
  """Unique document search"""
  where: CrustWhereUniqueInput!

  """Upsert data"""
  data: CrustUpsertInput!
}

"""Identifies documents"""
input CrustWhereInput {
  """Contains search across all appropriate fields."""
  _search: String

  """Logical AND on all given filters."""
  AND: [CrustWhereInput!]

  """Logical OR on all given filters."""
  OR: [CrustWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CrustWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  publishedAt: DateTime

  """All values that are not equal to given value."""
  publishedAt_not: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime!]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime
  pizzas_every: PizzaWhereInput
  pizzas_some: PizzaWhereInput
  pizzas_none: PizzaWhereInput
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string"""
  title_not_ends_with: String
}

"""References Crust record uniquely"""
input CrustWhereUniqueInput {
  id: ID
}

"""
A date string, such as 2007-12-03 (YYYY-MM-DD), compliant with ISO 8601 standard
for representation of dates using the Gregorian calendar.
"""
scalar Date

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the
date-timeformat outlined in section 5.6 of the RFC 3339 profile of the ISO 8601
standard for representationof dates and times using the Gregorian calendar.
"""
scalar DateTime

enum DocumentFileTypes {
  jpg
  odp
  ods
  odt
  png
  svg
  txt
  webp
  docx
  pdf
  html
  doc
  xlsx
  xls
  pptx
  ppt
}

input DocumentOutputInput {
  """
  Transforms a document into a desired file type.
  See this matrix for format support:
  
  PDF:	jpg, odp, ods, odt, png, svg, txt, and webp
  DOC:	docx, html, jpg, odt, pdf, png, svg, txt, and webp
  DOCX:	doc, html, jpg, odt, pdf, png, svg, txt, and webp
  ODT:	doc, docx, html, jpg, pdf, png, svg, txt, and webp
  XLS:	jpg, pdf, ods, png, svg, xlsx, and webp
  XLSX:	jpg, pdf, ods, png, svg, xls, and webp
  ODS:	jpg, pdf, png, xls, svg, xlsx, and webp
  PPT:	jpg, odp, pdf, png, svg, pptx, and webp
  PPTX:	jpg, odp, pdf, png, svg, ppt, and webp
  ODP:	jpg, pdf, png, ppt, svg, pptx, and webp
  BMP:	jpg, odp, ods, odt, pdf, png, svg, and webp
  GIF:	jpg, odp, ods, odt, pdf, png, svg, and webp
  JPG:	jpg, odp, ods, odt, pdf, png, svg, and webp
  PNG:	jpg, odp, ods, odt, pdf, png, svg, and webp
  WEBP:	jpg, odp, ods, odt, pdf, png, svg, and webp
  TIFF:	jpg, odp, ods, odt, pdf, png, svg, and webp
  AI:	    jpg, odp, ods, odt, pdf, png, svg, and webp
  PSD:	jpg, odp, ods, odt, pdf, png, svg, and webp
  SVG:	jpg, odp, ods, odt, pdf, png, and webp
  HTML:	jpg, odt, pdf, svg, txt, and webp
  TXT:	jpg, html, odt, pdf, svg, and webp
  """
  format: DocumentFileTypes
}

"""Transformations for Documents"""
input DocumentTransformationInput {
  """Changes the output for the file."""
  output: DocumentOutputInput
}

type DocumentVersion {
  id: ID!
  stage: Stage!
  revision: Int!
  createdAt: DateTime!
  data: Json
}

type Fruit implements Node {
  """System stage field"""
  stage: Stage!

  """Get the document in other stages"""
  documentInStages(
    """Potential stages that should be returned"""
    stages: [Stage!]! = [PUBLISHED, DRAFT]

    """Decides if the current stage should be included or not"""
    includeCurrent: Boolean! = false

    """
    Decides if the documents should match the parent documents locale or should use the fallback order defined in the tree
    """
    inheritLocale: Boolean! = false
  ): [Fruit!]!

  """The unique identifier"""
  id: ID!

  """The time the document was created"""
  createdAt: DateTime!

  """The time the document was updated"""
  updatedAt: DateTime!

  """The time the document was published. Null on documents in draft stage."""
  publishedAt: DateTime
  pizza(skip: Int, after: String, before: String, first: Int, last: Int): [Pizza!]!
  title: String

  """List of Fruit versions"""
  history(
    limit: Int! = 10
    skip: Int! = 0

    """
    This is optional and can be used to fetch the document version history for a specific stage instead of the current one
    """
    stageOverride: Stage
  ): [Version!]!
}

input FruitConnectInput {
  """Document to connect"""
  where: FruitWhereUniqueInput!

  """
  Allow to specify document position in list of connected documents, will default to appending at end of list
  """
  position: ConnectPositionInput
}

"""A connection to a list of items."""
type FruitConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FruitEdge!]!
  aggregate: Aggregate!
}

input FruitCreateInput {
  createdAt: DateTime
  updatedAt: DateTime
  pizza: PizzaCreateManyInlineInput
  title: String
}

input FruitCreateManyInlineInput {
  """Create and connect multiple existing Fruit documents"""
  create: [FruitCreateInput!]

  """Connect multiple existing Fruit documents"""
  connect: [FruitWhereUniqueInput!]
}

input FruitCreateOneInlineInput {
  """Create and connect one Fruit document"""
  create: FruitCreateInput

  """Connect one existing Fruit document"""
  connect: FruitWhereUniqueInput
}

"""An edge in a connection."""
type FruitEdge {
  """The item at the end of the edge."""
  node: Fruit!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Identifies documents"""
input FruitManyWhereInput {
  """Contains search across all appropriate fields."""
  _search: String

  """Logical AND on all given filters."""
  AND: [FruitWhereInput!]

  """Logical OR on all given filters."""
  OR: [FruitWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FruitWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  publishedAt: DateTime

  """All values that are not equal to given value."""
  publishedAt_not: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime!]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string"""
  title_not_ends_with: String
}

enum FruitOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  publishedAt_ASC
  publishedAt_DESC
  title_ASC
  title_DESC
}

input FruitUpdateInput {
  pizza: PizzaUpdateManyInlineInput
  title: String
}

input FruitUpdateManyInlineInput {
  """Create and connect multiple Fruit documents"""
  create: [FruitCreateInput!]

  """Connect multiple existing Fruit documents"""
  connect: [FruitConnectInput!]

  """
  Override currently-connected documents with multiple existing Fruit documents
  """
  set: [FruitWhereUniqueInput!]

  """Update multiple Fruit documents"""
  update: [FruitUpdateWithNestedWhereUniqueInput!]

  """Upsert multiple Fruit documents"""
  upsert: [FruitUpsertWithNestedWhereUniqueInput!]

  """Disconnect multiple Fruit documents"""
  disconnect: [FruitWhereUniqueInput!]

  """Delete multiple Fruit documents"""
  delete: [FruitWhereUniqueInput!]
}

input FruitUpdateManyInput {
  title: String
}

input FruitUpdateManyWithNestedWhereInput {
  """Document search"""
  where: FruitWhereInput!

  """Update many input"""
  data: FruitUpdateManyInput!
}

input FruitUpdateOneInlineInput {
  """Create and connect one Fruit document"""
  create: FruitCreateInput

  """Update single Fruit document"""
  update: FruitUpdateWithNestedWhereUniqueInput

  """Upsert single Fruit document"""
  upsert: FruitUpsertWithNestedWhereUniqueInput

  """Connect existing Fruit document"""
  connect: FruitWhereUniqueInput

  """Disconnect currently connected Fruit document"""
  disconnect: Boolean

  """Delete currently connected Fruit document"""
  delete: Boolean
}

input FruitUpdateWithNestedWhereUniqueInput {
  """Unique document search"""
  where: FruitWhereUniqueInput!

  """Document to update"""
  data: FruitUpdateInput!
}

input FruitUpsertInput {
  """Create document if it didn't exist"""
  create: FruitCreateInput!

  """Update document if it exists"""
  update: FruitUpdateInput!
}

input FruitUpsertWithNestedWhereUniqueInput {
  """Unique document search"""
  where: FruitWhereUniqueInput!

  """Upsert data"""
  data: FruitUpsertInput!
}

"""Identifies documents"""
input FruitWhereInput {
  """Contains search across all appropriate fields."""
  _search: String

  """Logical AND on all given filters."""
  AND: [FruitWhereInput!]

  """Logical OR on all given filters."""
  OR: [FruitWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FruitWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  publishedAt: DateTime

  """All values that are not equal to given value."""
  publishedAt_not: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime!]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string"""
  title_not_ends_with: String
}

"""References Fruit record uniquely"""
input FruitWhereUniqueInput {
  id: ID
}

type Fungus implements Node {
  """System stage field"""
  stage: Stage!

  """Get the document in other stages"""
  documentInStages(
    """Potential stages that should be returned"""
    stages: [Stage!]! = [PUBLISHED, DRAFT]

    """Decides if the current stage should be included or not"""
    includeCurrent: Boolean! = false

    """
    Decides if the documents should match the parent documents locale or should use the fallback order defined in the tree
    """
    inheritLocale: Boolean! = false
  ): [Fungus!]!

  """The unique identifier"""
  id: ID!

  """The time the document was created"""
  createdAt: DateTime!

  """The time the document was updated"""
  updatedAt: DateTime!

  """The time the document was published. Null on documents in draft stage."""
  publishedAt: DateTime
  pizza(skip: Int, after: String, before: String, first: Int, last: Int): [Pizza!]!
  title: String

  """List of Fungus versions"""
  history(
    limit: Int! = 10
    skip: Int! = 0

    """
    This is optional and can be used to fetch the document version history for a specific stage instead of the current one
    """
    stageOverride: Stage
  ): [Version!]!
}

input FungusConnectInput {
  """Document to connect"""
  where: FungusWhereUniqueInput!

  """
  Allow to specify document position in list of connected documents, will default to appending at end of list
  """
  position: ConnectPositionInput
}

"""A connection to a list of items."""
type FungusConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FungusEdge!]!
  aggregate: Aggregate!
}

input FungusCreateInput {
  createdAt: DateTime
  updatedAt: DateTime
  pizza: PizzaCreateManyInlineInput
  title: String
}

input FungusCreateManyInlineInput {
  """Create and connect multiple existing Fungus documents"""
  create: [FungusCreateInput!]

  """Connect multiple existing Fungus documents"""
  connect: [FungusWhereUniqueInput!]
}

input FungusCreateOneInlineInput {
  """Create and connect one Fungus document"""
  create: FungusCreateInput

  """Connect one existing Fungus document"""
  connect: FungusWhereUniqueInput
}

"""An edge in a connection."""
type FungusEdge {
  """The item at the end of the edge."""
  node: Fungus!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Identifies documents"""
input FungusManyWhereInput {
  """Contains search across all appropriate fields."""
  _search: String

  """Logical AND on all given filters."""
  AND: [FungusWhereInput!]

  """Logical OR on all given filters."""
  OR: [FungusWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FungusWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  publishedAt: DateTime

  """All values that are not equal to given value."""
  publishedAt_not: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime!]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string"""
  title_not_ends_with: String
}

enum FungusOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  publishedAt_ASC
  publishedAt_DESC
  title_ASC
  title_DESC
}

input FungusUpdateInput {
  pizza: PizzaUpdateManyInlineInput
  title: String
}

input FungusUpdateManyInlineInput {
  """Create and connect multiple Fungus documents"""
  create: [FungusCreateInput!]

  """Connect multiple existing Fungus documents"""
  connect: [FungusConnectInput!]

  """
  Override currently-connected documents with multiple existing Fungus documents
  """
  set: [FungusWhereUniqueInput!]

  """Update multiple Fungus documents"""
  update: [FungusUpdateWithNestedWhereUniqueInput!]

  """Upsert multiple Fungus documents"""
  upsert: [FungusUpsertWithNestedWhereUniqueInput!]

  """Disconnect multiple Fungus documents"""
  disconnect: [FungusWhereUniqueInput!]

  """Delete multiple Fungus documents"""
  delete: [FungusWhereUniqueInput!]
}

input FungusUpdateManyInput {
  title: String
}

input FungusUpdateManyWithNestedWhereInput {
  """Document search"""
  where: FungusWhereInput!

  """Update many input"""
  data: FungusUpdateManyInput!
}

input FungusUpdateOneInlineInput {
  """Create and connect one Fungus document"""
  create: FungusCreateInput

  """Update single Fungus document"""
  update: FungusUpdateWithNestedWhereUniqueInput

  """Upsert single Fungus document"""
  upsert: FungusUpsertWithNestedWhereUniqueInput

  """Connect existing Fungus document"""
  connect: FungusWhereUniqueInput

  """Disconnect currently connected Fungus document"""
  disconnect: Boolean

  """Delete currently connected Fungus document"""
  delete: Boolean
}

input FungusUpdateWithNestedWhereUniqueInput {
  """Unique document search"""
  where: FungusWhereUniqueInput!

  """Document to update"""
  data: FungusUpdateInput!
}

input FungusUpsertInput {
  """Create document if it didn't exist"""
  create: FungusCreateInput!

  """Update document if it exists"""
  update: FungusUpdateInput!
}

input FungusUpsertWithNestedWhereUniqueInput {
  """Unique document search"""
  where: FungusWhereUniqueInput!

  """Upsert data"""
  data: FungusUpsertInput!
}

"""Identifies documents"""
input FungusWhereInput {
  """Contains search across all appropriate fields."""
  _search: String

  """Logical AND on all given filters."""
  AND: [FungusWhereInput!]

  """Logical OR on all given filters."""
  OR: [FungusWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FungusWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  publishedAt: DateTime

  """All values that are not equal to given value."""
  publishedAt_not: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime!]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string"""
  title_not_ends_with: String
}

"""References Fungus record uniquely"""
input FungusWhereUniqueInput {
  id: ID
}

scalar Hex

enum ImageFit {
  """
  Resizes the image to fit within the specified parameters without distorting, cropping, or changing the aspect ratio.
  """
  clip

  """
  Resizes the image to fit the specified parameters exactly by removing any
  parts of the image that don't fit within the boundaries.
  """
  crop

  """
  Resizes the image to fit the specified parameters exactly by scaling the image
  to the desired size. The aspect ratio of the image is not respected and the
  image can be distorted using this method.
  """
  scale

  """
  Resizes the image to fit within the parameters, but as opposed to 'fit:clip'
  will not scale the image if the image is smaller than the output size.
  """
  max
}

input ImageResizeInput {
  """
  The width in pixels to resize the image to. The value must be an integer from 1 to 10000.
  """
  width: Int

  """
  The height in pixels to resize the image to. The value must be an integer from 1 to 10000.
  """
  height: Int

  """The default value for the fit parameter is fit:clip."""
  fit: ImageFit
}

"""Transformations for Images"""
input ImageTransformationInput {
  """Resizes the image"""
  resize: ImageResizeInput
}

"""Raw JSON value"""
scalar Json

"""Locale system enumeration"""
enum Locale {
  """System locale"""
  en
}

"""Representing a geolocation point with latitude and longitude"""
type Location {
  latitude: Float!
  longitude: Float!
  distance(from: LocationInput!): Float!
}

"""Input for a geolocation point with latitude and longitude"""
input LocationInput {
  latitude: Float!
  longitude: Float!
}

"""
The Long scalar type represents non-fractional signed whole numeric values. Long
can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Meat implements Node {
  """System stage field"""
  stage: Stage!

  """Get the document in other stages"""
  documentInStages(
    """Potential stages that should be returned"""
    stages: [Stage!]! = [PUBLISHED, DRAFT]

    """Decides if the current stage should be included or not"""
    includeCurrent: Boolean! = false

    """
    Decides if the documents should match the parent documents locale or should use the fallback order defined in the tree
    """
    inheritLocale: Boolean! = false
  ): [Meat!]!

  """The unique identifier"""
  id: ID!

  """The time the document was created"""
  createdAt: DateTime!

  """The time the document was updated"""
  updatedAt: DateTime!

  """The time the document was published. Null on documents in draft stage."""
  publishedAt: DateTime
  pizza(skip: Int, after: String, before: String, first: Int, last: Int): [Pizza!]!
  title: String

  """List of Meat versions"""
  history(
    limit: Int! = 10
    skip: Int! = 0

    """
    This is optional and can be used to fetch the document version history for a specific stage instead of the current one
    """
    stageOverride: Stage
  ): [Version!]!
}

input MeatConnectInput {
  """Document to connect"""
  where: MeatWhereUniqueInput!

  """
  Allow to specify document position in list of connected documents, will default to appending at end of list
  """
  position: ConnectPositionInput
}

"""A connection to a list of items."""
type MeatConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [MeatEdge!]!
  aggregate: Aggregate!
}

input MeatCreateInput {
  createdAt: DateTime
  updatedAt: DateTime
  pizza: PizzaCreateManyInlineInput
  title: String
}

input MeatCreateManyInlineInput {
  """Create and connect multiple existing Meat documents"""
  create: [MeatCreateInput!]

  """Connect multiple existing Meat documents"""
  connect: [MeatWhereUniqueInput!]
}

input MeatCreateOneInlineInput {
  """Create and connect one Meat document"""
  create: MeatCreateInput

  """Connect one existing Meat document"""
  connect: MeatWhereUniqueInput
}

"""An edge in a connection."""
type MeatEdge {
  """The item at the end of the edge."""
  node: Meat!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Identifies documents"""
input MeatManyWhereInput {
  """Contains search across all appropriate fields."""
  _search: String

  """Logical AND on all given filters."""
  AND: [MeatWhereInput!]

  """Logical OR on all given filters."""
  OR: [MeatWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MeatWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  publishedAt: DateTime

  """All values that are not equal to given value."""
  publishedAt_not: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime!]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string"""
  title_not_ends_with: String
}

enum MeatOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  publishedAt_ASC
  publishedAt_DESC
  title_ASC
  title_DESC
}

input MeatUpdateInput {
  pizza: PizzaUpdateManyInlineInput
  title: String
}

input MeatUpdateManyInlineInput {
  """Create and connect multiple Meat documents"""
  create: [MeatCreateInput!]

  """Connect multiple existing Meat documents"""
  connect: [MeatConnectInput!]

  """
  Override currently-connected documents with multiple existing Meat documents
  """
  set: [MeatWhereUniqueInput!]

  """Update multiple Meat documents"""
  update: [MeatUpdateWithNestedWhereUniqueInput!]

  """Upsert multiple Meat documents"""
  upsert: [MeatUpsertWithNestedWhereUniqueInput!]

  """Disconnect multiple Meat documents"""
  disconnect: [MeatWhereUniqueInput!]

  """Delete multiple Meat documents"""
  delete: [MeatWhereUniqueInput!]
}

input MeatUpdateManyInput {
  title: String
}

input MeatUpdateManyWithNestedWhereInput {
  """Document search"""
  where: MeatWhereInput!

  """Update many input"""
  data: MeatUpdateManyInput!
}

input MeatUpdateOneInlineInput {
  """Create and connect one Meat document"""
  create: MeatCreateInput

  """Update single Meat document"""
  update: MeatUpdateWithNestedWhereUniqueInput

  """Upsert single Meat document"""
  upsert: MeatUpsertWithNestedWhereUniqueInput

  """Connect existing Meat document"""
  connect: MeatWhereUniqueInput

  """Disconnect currently connected Meat document"""
  disconnect: Boolean

  """Delete currently connected Meat document"""
  delete: Boolean
}

input MeatUpdateWithNestedWhereUniqueInput {
  """Unique document search"""
  where: MeatWhereUniqueInput!

  """Document to update"""
  data: MeatUpdateInput!
}

input MeatUpsertInput {
  """Create document if it didn't exist"""
  create: MeatCreateInput!

  """Update document if it exists"""
  update: MeatUpdateInput!
}

input MeatUpsertWithNestedWhereUniqueInput {
  """Unique document search"""
  where: MeatWhereUniqueInput!

  """Upsert data"""
  data: MeatUpsertInput!
}

"""Identifies documents"""
input MeatWhereInput {
  """Contains search across all appropriate fields."""
  _search: String

  """Logical AND on all given filters."""
  AND: [MeatWhereInput!]

  """Logical OR on all given filters."""
  OR: [MeatWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MeatWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  publishedAt: DateTime

  """All values that are not equal to given value."""
  publishedAt_not: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime!]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string"""
  title_not_ends_with: String
}

"""References Meat record uniquely"""
input MeatWhereUniqueInput {
  id: ID
}

type Mutation {
  """Create one asset"""
  createAsset(data: AssetCreateInput!): Asset @deprecated(reason: "Asset mutations will be overhauled soon")

  """Update one asset"""
  updateAsset(where: AssetWhereUniqueInput!, data: AssetUpdateInput!): Asset

  """Delete one asset from _all_ existing stages. Returns deleted document."""
  deleteAsset(
    """Document to delete"""
    where: AssetWhereUniqueInput!
  ): Asset

  """Upsert one asset"""
  upsertAsset(where: AssetWhereUniqueInput!, upsert: AssetUpsertInput!): Asset

  """Publish one asset"""
  publishAsset(
    """Document to publish"""
    where: AssetWhereUniqueInput!

    """Optional localizations to publish"""
    locales: [Locale!]

    """
    Publish base document including default localization and relations, as well
    as selected additional localizations. Returns document in mutation stage.
    """
    publishBase: Boolean = true

    """Publishing target stage"""
    to: [Stage!]! = [PUBLISHED]
  ): Asset

  """
  Unpublish one asset from selected stages. Unpublish either the complete
  document with its relations, localizations and base data or specific
  localizations only.
  """
  unpublishAsset(
    """Document to unpublish"""
    where: AssetWhereUniqueInput!

    """Stages to unpublish document from"""
    from: [Stage!]! = [PUBLISHED]

    """
    Optional locales to unpublish. Unpublishing the default locale will
    completely remove the document from the selected stages
    """
    locales: [Locale!]

    """
    Unpublish complete document including default localization and relations from stages. Can be disabled.
    """
    unpublishBase: Boolean = true
  ): Asset

  """Update many Asset documents"""
  updateManyAssetsConnection(
    """Documents to apply update on"""
    where: AssetManyWhereInput

    """Updates to document content"""
    data: AssetUpdateManyInput!
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): AssetConnection!

  """Delete many Asset documents, return deleted documents"""
  deleteManyAssetsConnection(
    """Documents to delete"""
    where: AssetManyWhereInput
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): AssetConnection!

  """Publish many Asset documents"""
  publishManyAssetsConnection(
    """Identifies documents in each stage to be published"""
    where: AssetManyWhereInput

    """Stage to find matching documents in"""
    from: Stage = DRAFT

    """Stages to publish documents to"""
    to: [Stage!]! = [PUBLISHED]
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID

    """Document localizations to publish"""
    locales: [Locale!]

    """Whether to publish the base document and default localization"""
    publishBase: Boolean = true
  ): AssetConnection!

  """
  Find many Asset documents that match criteria in specified stage and unpublish from target stages
  """
  unpublishManyAssetsConnection(
    """Identifies documents in draft stage"""
    where: AssetManyWhereInput

    """Stage to find matching documents in"""
    stage: Stage = DRAFT

    """Stages to unpublish documents from"""
    from: [Stage!]! = [PUBLISHED]
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID

    """Locales to unpublish"""
    locales: [Locale!]

    """Whether to unpublish the base document and default localization"""
    unpublishBase: Boolean = true
  ): AssetConnection!

  """Update many assets"""
  updateManyAssets(
    """Documents to apply update on"""
    where: AssetManyWhereInput

    """Updates to document content"""
    data: AssetUpdateManyInput!
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (updateManyAssetsConnection)")

  """Delete many Asset documents"""
  deleteManyAssets(
    """Documents to delete"""
    where: AssetManyWhereInput
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (deleteManyAssetsConnection)")

  """Publish many Asset documents"""
  publishManyAssets(
    """Identifies documents in each stage to be published"""
    where: AssetManyWhereInput

    """Stages to publish documents to"""
    to: [Stage!]! = [PUBLISHED]

    """Document localizations to publish"""
    locales: [Locale!]

    """Whether to publish the base document and default localization"""
    publishBase: Boolean = true
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (publishManyAssetsConnection)")

  """Unpublish many Asset documents"""
  unpublishManyAssets(
    """Identifies documents in each stage"""
    where: AssetManyWhereInput

    """Stages to unpublish documents from"""
    from: [Stage!]! = [PUBLISHED]

    """Locales to unpublish"""
    locales: [Locale!]

    """Whether to unpublish the base document and default localization"""
    unpublishBase: Boolean = true
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (unpublishManyAssetsConnection)")

  """Create one cheese"""
  createCheese(data: CheeseCreateInput!): Cheese

  """Update one cheese"""
  updateCheese(where: CheeseWhereUniqueInput!, data: CheeseUpdateInput!): Cheese

  """
  Delete one cheese from _all_ existing stages. Returns deleted document.
  """
  deleteCheese(
    """Document to delete"""
    where: CheeseWhereUniqueInput!
  ): Cheese

  """Upsert one cheese"""
  upsertCheese(where: CheeseWhereUniqueInput!, upsert: CheeseUpsertInput!): Cheese

  """Publish one cheese"""
  publishCheese(
    """Document to publish"""
    where: CheeseWhereUniqueInput!

    """Publishing target stage"""
    to: [Stage!]! = [PUBLISHED]
  ): Cheese

  """
  Unpublish one cheese from selected stages. Unpublish either the complete
  document with its relations, localizations and base data or specific
  localizations only.
  """
  unpublishCheese(
    """Document to unpublish"""
    where: CheeseWhereUniqueInput!

    """Stages to unpublish document from"""
    from: [Stage!]! = [PUBLISHED]
  ): Cheese

  """Update many Cheese documents"""
  updateManyCheesesConnection(
    """Documents to apply update on"""
    where: CheeseManyWhereInput

    """Updates to document content"""
    data: CheeseUpdateManyInput!
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): CheeseConnection!

  """Delete many Cheese documents, return deleted documents"""
  deleteManyCheesesConnection(
    """Documents to delete"""
    where: CheeseManyWhereInput
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): CheeseConnection!

  """Publish many Cheese documents"""
  publishManyCheesesConnection(
    """Identifies documents in each stage to be published"""
    where: CheeseManyWhereInput

    """Stage to find matching documents in"""
    from: Stage = DRAFT

    """Stages to publish documents to"""
    to: [Stage!]! = [PUBLISHED]
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): CheeseConnection!

  """
  Find many Cheese documents that match criteria in specified stage and unpublish from target stages
  """
  unpublishManyCheesesConnection(
    """Identifies documents in draft stage"""
    where: CheeseManyWhereInput

    """Stage to find matching documents in"""
    stage: Stage = DRAFT

    """Stages to unpublish documents from"""
    from: [Stage!]! = [PUBLISHED]
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): CheeseConnection!

  """Update many cheeses"""
  updateManyCheeses(
    """Documents to apply update on"""
    where: CheeseManyWhereInput

    """Updates to document content"""
    data: CheeseUpdateManyInput!
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (updateManyCheesesConnection)")

  """Delete many Cheese documents"""
  deleteManyCheeses(
    """Documents to delete"""
    where: CheeseManyWhereInput
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (deleteManyCheesesConnection)")

  """Publish many Cheese documents"""
  publishManyCheeses(
    """Identifies documents in each stage to be published"""
    where: CheeseManyWhereInput

    """Stages to publish documents to"""
    to: [Stage!]! = [PUBLISHED]
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (publishManyCheesesConnection)")

  """Unpublish many Cheese documents"""
  unpublishManyCheeses(
    """Identifies documents in each stage"""
    where: CheeseManyWhereInput

    """Stages to unpublish documents from"""
    from: [Stage!]! = [PUBLISHED]
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (unpublishManyCheesesConnection)")

  """Create one crust"""
  createCrust(data: CrustCreateInput!): Crust

  """Update one crust"""
  updateCrust(where: CrustWhereUniqueInput!, data: CrustUpdateInput!): Crust

  """Delete one crust from _all_ existing stages. Returns deleted document."""
  deleteCrust(
    """Document to delete"""
    where: CrustWhereUniqueInput!
  ): Crust

  """Upsert one crust"""
  upsertCrust(where: CrustWhereUniqueInput!, upsert: CrustUpsertInput!): Crust

  """Publish one crust"""
  publishCrust(
    """Document to publish"""
    where: CrustWhereUniqueInput!

    """Publishing target stage"""
    to: [Stage!]! = [PUBLISHED]
  ): Crust

  """
  Unpublish one crust from selected stages. Unpublish either the complete
  document with its relations, localizations and base data or specific
  localizations only.
  """
  unpublishCrust(
    """Document to unpublish"""
    where: CrustWhereUniqueInput!

    """Stages to unpublish document from"""
    from: [Stage!]! = [PUBLISHED]
  ): Crust

  """Update many Crust documents"""
  updateManyCrustsConnection(
    """Documents to apply update on"""
    where: CrustManyWhereInput

    """Updates to document content"""
    data: CrustUpdateManyInput!
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): CrustConnection!

  """Delete many Crust documents, return deleted documents"""
  deleteManyCrustsConnection(
    """Documents to delete"""
    where: CrustManyWhereInput
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): CrustConnection!

  """Publish many Crust documents"""
  publishManyCrustsConnection(
    """Identifies documents in each stage to be published"""
    where: CrustManyWhereInput

    """Stage to find matching documents in"""
    from: Stage = DRAFT

    """Stages to publish documents to"""
    to: [Stage!]! = [PUBLISHED]
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): CrustConnection!

  """
  Find many Crust documents that match criteria in specified stage and unpublish from target stages
  """
  unpublishManyCrustsConnection(
    """Identifies documents in draft stage"""
    where: CrustManyWhereInput

    """Stage to find matching documents in"""
    stage: Stage = DRAFT

    """Stages to unpublish documents from"""
    from: [Stage!]! = [PUBLISHED]
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): CrustConnection!

  """Update many crusts"""
  updateManyCrusts(
    """Documents to apply update on"""
    where: CrustManyWhereInput

    """Updates to document content"""
    data: CrustUpdateManyInput!
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (updateManyCrustsConnection)")

  """Delete many Crust documents"""
  deleteManyCrusts(
    """Documents to delete"""
    where: CrustManyWhereInput
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (deleteManyCrustsConnection)")

  """Publish many Crust documents"""
  publishManyCrusts(
    """Identifies documents in each stage to be published"""
    where: CrustManyWhereInput

    """Stages to publish documents to"""
    to: [Stage!]! = [PUBLISHED]
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (publishManyCrustsConnection)")

  """Unpublish many Crust documents"""
  unpublishManyCrusts(
    """Identifies documents in each stage"""
    where: CrustManyWhereInput

    """Stages to unpublish documents from"""
    from: [Stage!]! = [PUBLISHED]
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (unpublishManyCrustsConnection)")

  """Create one fruit"""
  createFruit(data: FruitCreateInput!): Fruit

  """Update one fruit"""
  updateFruit(where: FruitWhereUniqueInput!, data: FruitUpdateInput!): Fruit

  """Delete one fruit from _all_ existing stages. Returns deleted document."""
  deleteFruit(
    """Document to delete"""
    where: FruitWhereUniqueInput!
  ): Fruit

  """Upsert one fruit"""
  upsertFruit(where: FruitWhereUniqueInput!, upsert: FruitUpsertInput!): Fruit

  """Publish one fruit"""
  publishFruit(
    """Document to publish"""
    where: FruitWhereUniqueInput!

    """Publishing target stage"""
    to: [Stage!]! = [PUBLISHED]
  ): Fruit

  """
  Unpublish one fruit from selected stages. Unpublish either the complete
  document with its relations, localizations and base data or specific
  localizations only.
  """
  unpublishFruit(
    """Document to unpublish"""
    where: FruitWhereUniqueInput!

    """Stages to unpublish document from"""
    from: [Stage!]! = [PUBLISHED]
  ): Fruit

  """Update many Fruit documents"""
  updateManyFruitsConnection(
    """Documents to apply update on"""
    where: FruitManyWhereInput

    """Updates to document content"""
    data: FruitUpdateManyInput!
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): FruitConnection!

  """Delete many Fruit documents, return deleted documents"""
  deleteManyFruitsConnection(
    """Documents to delete"""
    where: FruitManyWhereInput
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): FruitConnection!

  """Publish many Fruit documents"""
  publishManyFruitsConnection(
    """Identifies documents in each stage to be published"""
    where: FruitManyWhereInput

    """Stage to find matching documents in"""
    from: Stage = DRAFT

    """Stages to publish documents to"""
    to: [Stage!]! = [PUBLISHED]
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): FruitConnection!

  """
  Find many Fruit documents that match criteria in specified stage and unpublish from target stages
  """
  unpublishManyFruitsConnection(
    """Identifies documents in draft stage"""
    where: FruitManyWhereInput

    """Stage to find matching documents in"""
    stage: Stage = DRAFT

    """Stages to unpublish documents from"""
    from: [Stage!]! = [PUBLISHED]
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): FruitConnection!

  """Update many fruits"""
  updateManyFruits(
    """Documents to apply update on"""
    where: FruitManyWhereInput

    """Updates to document content"""
    data: FruitUpdateManyInput!
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (updateManyFruitsConnection)")

  """Delete many Fruit documents"""
  deleteManyFruits(
    """Documents to delete"""
    where: FruitManyWhereInput
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (deleteManyFruitsConnection)")

  """Publish many Fruit documents"""
  publishManyFruits(
    """Identifies documents in each stage to be published"""
    where: FruitManyWhereInput

    """Stages to publish documents to"""
    to: [Stage!]! = [PUBLISHED]
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (publishManyFruitsConnection)")

  """Unpublish many Fruit documents"""
  unpublishManyFruits(
    """Identifies documents in each stage"""
    where: FruitManyWhereInput

    """Stages to unpublish documents from"""
    from: [Stage!]! = [PUBLISHED]
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (unpublishManyFruitsConnection)")

  """Create one fungus"""
  createFungus(data: FungusCreateInput!): Fungus

  """Update one fungus"""
  updateFungus(where: FungusWhereUniqueInput!, data: FungusUpdateInput!): Fungus

  """
  Delete one fungus from _all_ existing stages. Returns deleted document.
  """
  deleteFungus(
    """Document to delete"""
    where: FungusWhereUniqueInput!
  ): Fungus

  """Upsert one fungus"""
  upsertFungus(where: FungusWhereUniqueInput!, upsert: FungusUpsertInput!): Fungus

  """Publish one fungus"""
  publishFungus(
    """Document to publish"""
    where: FungusWhereUniqueInput!

    """Publishing target stage"""
    to: [Stage!]! = [PUBLISHED]
  ): Fungus

  """
  Unpublish one fungus from selected stages. Unpublish either the complete
  document with its relations, localizations and base data or specific
  localizations only.
  """
  unpublishFungus(
    """Document to unpublish"""
    where: FungusWhereUniqueInput!

    """Stages to unpublish document from"""
    from: [Stage!]! = [PUBLISHED]
  ): Fungus

  """Update many Fungus documents"""
  updateManyFungiConnection(
    """Documents to apply update on"""
    where: FungusManyWhereInput

    """Updates to document content"""
    data: FungusUpdateManyInput!
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): FungusConnection!

  """Delete many Fungus documents, return deleted documents"""
  deleteManyFungiConnection(
    """Documents to delete"""
    where: FungusManyWhereInput
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): FungusConnection!

  """Publish many Fungus documents"""
  publishManyFungiConnection(
    """Identifies documents in each stage to be published"""
    where: FungusManyWhereInput

    """Stage to find matching documents in"""
    from: Stage = DRAFT

    """Stages to publish documents to"""
    to: [Stage!]! = [PUBLISHED]
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): FungusConnection!

  """
  Find many Fungus documents that match criteria in specified stage and unpublish from target stages
  """
  unpublishManyFungiConnection(
    """Identifies documents in draft stage"""
    where: FungusManyWhereInput

    """Stage to find matching documents in"""
    stage: Stage = DRAFT

    """Stages to unpublish documents from"""
    from: [Stage!]! = [PUBLISHED]
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): FungusConnection!

  """Update many fungi"""
  updateManyFungi(
    """Documents to apply update on"""
    where: FungusManyWhereInput

    """Updates to document content"""
    data: FungusUpdateManyInput!
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (updateManyFungiConnection)")

  """Delete many Fungus documents"""
  deleteManyFungi(
    """Documents to delete"""
    where: FungusManyWhereInput
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (deleteManyFungiConnection)")

  """Publish many Fungus documents"""
  publishManyFungi(
    """Identifies documents in each stage to be published"""
    where: FungusManyWhereInput

    """Stages to publish documents to"""
    to: [Stage!]! = [PUBLISHED]
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (publishManyFungiConnection)")

  """Unpublish many Fungus documents"""
  unpublishManyFungi(
    """Identifies documents in each stage"""
    where: FungusManyWhereInput

    """Stages to unpublish documents from"""
    from: [Stage!]! = [PUBLISHED]
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (unpublishManyFungiConnection)")

  """Create one meat"""
  createMeat(data: MeatCreateInput!): Meat

  """Update one meat"""
  updateMeat(where: MeatWhereUniqueInput!, data: MeatUpdateInput!): Meat

  """Delete one meat from _all_ existing stages. Returns deleted document."""
  deleteMeat(
    """Document to delete"""
    where: MeatWhereUniqueInput!
  ): Meat

  """Upsert one meat"""
  upsertMeat(where: MeatWhereUniqueInput!, upsert: MeatUpsertInput!): Meat

  """Publish one meat"""
  publishMeat(
    """Document to publish"""
    where: MeatWhereUniqueInput!

    """Publishing target stage"""
    to: [Stage!]! = [PUBLISHED]
  ): Meat

  """
  Unpublish one meat from selected stages. Unpublish either the complete
  document with its relations, localizations and base data or specific
  localizations only.
  """
  unpublishMeat(
    """Document to unpublish"""
    where: MeatWhereUniqueInput!

    """Stages to unpublish document from"""
    from: [Stage!]! = [PUBLISHED]
  ): Meat

  """Update many Meat documents"""
  updateManyMeatsConnection(
    """Documents to apply update on"""
    where: MeatManyWhereInput

    """Updates to document content"""
    data: MeatUpdateManyInput!
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): MeatConnection!

  """Delete many Meat documents, return deleted documents"""
  deleteManyMeatsConnection(
    """Documents to delete"""
    where: MeatManyWhereInput
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): MeatConnection!

  """Publish many Meat documents"""
  publishManyMeatsConnection(
    """Identifies documents in each stage to be published"""
    where: MeatManyWhereInput

    """Stage to find matching documents in"""
    from: Stage = DRAFT

    """Stages to publish documents to"""
    to: [Stage!]! = [PUBLISHED]
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): MeatConnection!

  """
  Find many Meat documents that match criteria in specified stage and unpublish from target stages
  """
  unpublishManyMeatsConnection(
    """Identifies documents in draft stage"""
    where: MeatManyWhereInput

    """Stage to find matching documents in"""
    stage: Stage = DRAFT

    """Stages to unpublish documents from"""
    from: [Stage!]! = [PUBLISHED]
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): MeatConnection!

  """Update many meats"""
  updateManyMeats(
    """Documents to apply update on"""
    where: MeatManyWhereInput

    """Updates to document content"""
    data: MeatUpdateManyInput!
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (updateManyMeatsConnection)")

  """Delete many Meat documents"""
  deleteManyMeats(
    """Documents to delete"""
    where: MeatManyWhereInput
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (deleteManyMeatsConnection)")

  """Publish many Meat documents"""
  publishManyMeats(
    """Identifies documents in each stage to be published"""
    where: MeatManyWhereInput

    """Stages to publish documents to"""
    to: [Stage!]! = [PUBLISHED]
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (publishManyMeatsConnection)")

  """Unpublish many Meat documents"""
  unpublishManyMeats(
    """Identifies documents in each stage"""
    where: MeatManyWhereInput

    """Stages to unpublish documents from"""
    from: [Stage!]! = [PUBLISHED]
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (unpublishManyMeatsConnection)")

  """Create one oil"""
  createOil(data: OilCreateInput!): Oil

  """Update one oil"""
  updateOil(where: OilWhereUniqueInput!, data: OilUpdateInput!): Oil

  """Delete one oil from _all_ existing stages. Returns deleted document."""
  deleteOil(
    """Document to delete"""
    where: OilWhereUniqueInput!
  ): Oil

  """Upsert one oil"""
  upsertOil(where: OilWhereUniqueInput!, upsert: OilUpsertInput!): Oil

  """Publish one oil"""
  publishOil(
    """Document to publish"""
    where: OilWhereUniqueInput!

    """Publishing target stage"""
    to: [Stage!]! = [PUBLISHED]
  ): Oil

  """
  Unpublish one oil from selected stages. Unpublish either the complete document
  with its relations, localizations and base data or specific localizations only.
  """
  unpublishOil(
    """Document to unpublish"""
    where: OilWhereUniqueInput!

    """Stages to unpublish document from"""
    from: [Stage!]! = [PUBLISHED]
  ): Oil

  """Update many Oil documents"""
  updateManyOilsConnection(
    """Documents to apply update on"""
    where: OilManyWhereInput

    """Updates to document content"""
    data: OilUpdateManyInput!
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): OilConnection!

  """Delete many Oil documents, return deleted documents"""
  deleteManyOilsConnection(
    """Documents to delete"""
    where: OilManyWhereInput
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): OilConnection!

  """Publish many Oil documents"""
  publishManyOilsConnection(
    """Identifies documents in each stage to be published"""
    where: OilManyWhereInput

    """Stage to find matching documents in"""
    from: Stage = DRAFT

    """Stages to publish documents to"""
    to: [Stage!]! = [PUBLISHED]
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): OilConnection!

  """
  Find many Oil documents that match criteria in specified stage and unpublish from target stages
  """
  unpublishManyOilsConnection(
    """Identifies documents in draft stage"""
    where: OilManyWhereInput

    """Stage to find matching documents in"""
    stage: Stage = DRAFT

    """Stages to unpublish documents from"""
    from: [Stage!]! = [PUBLISHED]
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): OilConnection!

  """Update many oils"""
  updateManyOils(
    """Documents to apply update on"""
    where: OilManyWhereInput

    """Updates to document content"""
    data: OilUpdateManyInput!
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (updateManyOilsConnection)")

  """Delete many Oil documents"""
  deleteManyOils(
    """Documents to delete"""
    where: OilManyWhereInput
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (deleteManyOilsConnection)")

  """Publish many Oil documents"""
  publishManyOils(
    """Identifies documents in each stage to be published"""
    where: OilManyWhereInput

    """Stages to publish documents to"""
    to: [Stage!]! = [PUBLISHED]
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (publishManyOilsConnection)")

  """Unpublish many Oil documents"""
  unpublishManyOils(
    """Identifies documents in each stage"""
    where: OilManyWhereInput

    """Stages to unpublish documents from"""
    from: [Stage!]! = [PUBLISHED]
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (unpublishManyOilsConnection)")

  """Create one order"""
  createOrder(data: OrderCreateInput!): Order

  """Update one order"""
  updateOrder(where: OrderWhereUniqueInput!, data: OrderUpdateInput!): Order

  """Delete one order from _all_ existing stages. Returns deleted document."""
  deleteOrder(
    """Document to delete"""
    where: OrderWhereUniqueInput!
  ): Order

  """Upsert one order"""
  upsertOrder(where: OrderWhereUniqueInput!, upsert: OrderUpsertInput!): Order

  """Publish one order"""
  publishOrder(
    """Document to publish"""
    where: OrderWhereUniqueInput!

    """Publishing target stage"""
    to: [Stage!]! = [PUBLISHED]
  ): Order

  """
  Unpublish one order from selected stages. Unpublish either the complete
  document with its relations, localizations and base data or specific
  localizations only.
  """
  unpublishOrder(
    """Document to unpublish"""
    where: OrderWhereUniqueInput!

    """Stages to unpublish document from"""
    from: [Stage!]! = [PUBLISHED]
  ): Order

  """Update many Order documents"""
  updateManyOrdersConnection(
    """Documents to apply update on"""
    where: OrderManyWhereInput

    """Updates to document content"""
    data: OrderUpdateManyInput!
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): OrderConnection!

  """Delete many Order documents, return deleted documents"""
  deleteManyOrdersConnection(
    """Documents to delete"""
    where: OrderManyWhereInput
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): OrderConnection!

  """Publish many Order documents"""
  publishManyOrdersConnection(
    """Identifies documents in each stage to be published"""
    where: OrderManyWhereInput

    """Stage to find matching documents in"""
    from: Stage = DRAFT

    """Stages to publish documents to"""
    to: [Stage!]! = [PUBLISHED]
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): OrderConnection!

  """
  Find many Order documents that match criteria in specified stage and unpublish from target stages
  """
  unpublishManyOrdersConnection(
    """Identifies documents in draft stage"""
    where: OrderManyWhereInput

    """Stage to find matching documents in"""
    stage: Stage = DRAFT

    """Stages to unpublish documents from"""
    from: [Stage!]! = [PUBLISHED]
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): OrderConnection!

  """Update many orders"""
  updateManyOrders(
    """Documents to apply update on"""
    where: OrderManyWhereInput

    """Updates to document content"""
    data: OrderUpdateManyInput!
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (updateManyOrdersConnection)")

  """Delete many Order documents"""
  deleteManyOrders(
    """Documents to delete"""
    where: OrderManyWhereInput
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (deleteManyOrdersConnection)")

  """Publish many Order documents"""
  publishManyOrders(
    """Identifies documents in each stage to be published"""
    where: OrderManyWhereInput

    """Stages to publish documents to"""
    to: [Stage!]! = [PUBLISHED]
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (publishManyOrdersConnection)")

  """Unpublish many Order documents"""
  unpublishManyOrders(
    """Identifies documents in each stage"""
    where: OrderManyWhereInput

    """Stages to unpublish documents from"""
    from: [Stage!]! = [PUBLISHED]
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (unpublishManyOrdersConnection)")

  """Create one pizza"""
  createPizza(data: PizzaCreateInput!): Pizza

  """Update one pizza"""
  updatePizza(where: PizzaWhereUniqueInput!, data: PizzaUpdateInput!): Pizza

  """Delete one pizza from _all_ existing stages. Returns deleted document."""
  deletePizza(
    """Document to delete"""
    where: PizzaWhereUniqueInput!
  ): Pizza

  """Upsert one pizza"""
  upsertPizza(where: PizzaWhereUniqueInput!, upsert: PizzaUpsertInput!): Pizza

  """Publish one pizza"""
  publishPizza(
    """Document to publish"""
    where: PizzaWhereUniqueInput!

    """Publishing target stage"""
    to: [Stage!]! = [PUBLISHED]
  ): Pizza

  """
  Unpublish one pizza from selected stages. Unpublish either the complete
  document with its relations, localizations and base data or specific
  localizations only.
  """
  unpublishPizza(
    """Document to unpublish"""
    where: PizzaWhereUniqueInput!

    """Stages to unpublish document from"""
    from: [Stage!]! = [PUBLISHED]
  ): Pizza

  """Update many Pizza documents"""
  updateManyPizzasConnection(
    """Documents to apply update on"""
    where: PizzaManyWhereInput

    """Updates to document content"""
    data: PizzaUpdateManyInput!
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): PizzaConnection!

  """Delete many Pizza documents, return deleted documents"""
  deleteManyPizzasConnection(
    """Documents to delete"""
    where: PizzaManyWhereInput
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): PizzaConnection!

  """Publish many Pizza documents"""
  publishManyPizzasConnection(
    """Identifies documents in each stage to be published"""
    where: PizzaManyWhereInput

    """Stage to find matching documents in"""
    from: Stage = DRAFT

    """Stages to publish documents to"""
    to: [Stage!]! = [PUBLISHED]
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): PizzaConnection!

  """
  Find many Pizza documents that match criteria in specified stage and unpublish from target stages
  """
  unpublishManyPizzasConnection(
    """Identifies documents in draft stage"""
    where: PizzaManyWhereInput

    """Stage to find matching documents in"""
    stage: Stage = DRAFT

    """Stages to unpublish documents from"""
    from: [Stage!]! = [PUBLISHED]
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): PizzaConnection!

  """Update many pizzas"""
  updateManyPizzas(
    """Documents to apply update on"""
    where: PizzaManyWhereInput

    """Updates to document content"""
    data: PizzaUpdateManyInput!
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (updateManyPizzasConnection)")

  """Delete many Pizza documents"""
  deleteManyPizzas(
    """Documents to delete"""
    where: PizzaManyWhereInput
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (deleteManyPizzasConnection)")

  """Publish many Pizza documents"""
  publishManyPizzas(
    """Identifies documents in each stage to be published"""
    where: PizzaManyWhereInput

    """Stages to publish documents to"""
    to: [Stage!]! = [PUBLISHED]
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (publishManyPizzasConnection)")

  """Unpublish many Pizza documents"""
  unpublishManyPizzas(
    """Identifies documents in each stage"""
    where: PizzaManyWhereInput

    """Stages to unpublish documents from"""
    from: [Stage!]! = [PUBLISHED]
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (unpublishManyPizzasConnection)")

  """Create one sauce"""
  createSauce(data: SauceCreateInput!): Sauce

  """Update one sauce"""
  updateSauce(where: SauceWhereUniqueInput!, data: SauceUpdateInput!): Sauce

  """Delete one sauce from _all_ existing stages. Returns deleted document."""
  deleteSauce(
    """Document to delete"""
    where: SauceWhereUniqueInput!
  ): Sauce

  """Upsert one sauce"""
  upsertSauce(where: SauceWhereUniqueInput!, upsert: SauceUpsertInput!): Sauce

  """Publish one sauce"""
  publishSauce(
    """Document to publish"""
    where: SauceWhereUniqueInput!

    """Publishing target stage"""
    to: [Stage!]! = [PUBLISHED]
  ): Sauce

  """
  Unpublish one sauce from selected stages. Unpublish either the complete
  document with its relations, localizations and base data or specific
  localizations only.
  """
  unpublishSauce(
    """Document to unpublish"""
    where: SauceWhereUniqueInput!

    """Stages to unpublish document from"""
    from: [Stage!]! = [PUBLISHED]
  ): Sauce

  """Update many Sauce documents"""
  updateManySaucesConnection(
    """Documents to apply update on"""
    where: SauceManyWhereInput

    """Updates to document content"""
    data: SauceUpdateManyInput!
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): SauceConnection!

  """Delete many Sauce documents, return deleted documents"""
  deleteManySaucesConnection(
    """Documents to delete"""
    where: SauceManyWhereInput
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): SauceConnection!

  """Publish many Sauce documents"""
  publishManySaucesConnection(
    """Identifies documents in each stage to be published"""
    where: SauceManyWhereInput

    """Stage to find matching documents in"""
    from: Stage = DRAFT

    """Stages to publish documents to"""
    to: [Stage!]! = [PUBLISHED]
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): SauceConnection!

  """
  Find many Sauce documents that match criteria in specified stage and unpublish from target stages
  """
  unpublishManySaucesConnection(
    """Identifies documents in draft stage"""
    where: SauceManyWhereInput

    """Stage to find matching documents in"""
    stage: Stage = DRAFT

    """Stages to unpublish documents from"""
    from: [Stage!]! = [PUBLISHED]
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): SauceConnection!

  """Update many sauces"""
  updateManySauces(
    """Documents to apply update on"""
    where: SauceManyWhereInput

    """Updates to document content"""
    data: SauceUpdateManyInput!
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (updateManySaucesConnection)")

  """Delete many Sauce documents"""
  deleteManySauces(
    """Documents to delete"""
    where: SauceManyWhereInput
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (deleteManySaucesConnection)")

  """Publish many Sauce documents"""
  publishManySauces(
    """Identifies documents in each stage to be published"""
    where: SauceManyWhereInput

    """Stages to publish documents to"""
    to: [Stage!]! = [PUBLISHED]
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (publishManySaucesConnection)")

  """Unpublish many Sauce documents"""
  unpublishManySauces(
    """Identifies documents in each stage"""
    where: SauceManyWhereInput

    """Stages to unpublish documents from"""
    from: [Stage!]! = [PUBLISHED]
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (unpublishManySaucesConnection)")

  """Create one vegetable"""
  createVegetable(data: VegetableCreateInput!): Vegetable

  """Update one vegetable"""
  updateVegetable(where: VegetableWhereUniqueInput!, data: VegetableUpdateInput!): Vegetable

  """
  Delete one vegetable from _all_ existing stages. Returns deleted document.
  """
  deleteVegetable(
    """Document to delete"""
    where: VegetableWhereUniqueInput!
  ): Vegetable

  """Upsert one vegetable"""
  upsertVegetable(where: VegetableWhereUniqueInput!, upsert: VegetableUpsertInput!): Vegetable

  """Publish one vegetable"""
  publishVegetable(
    """Document to publish"""
    where: VegetableWhereUniqueInput!

    """Publishing target stage"""
    to: [Stage!]! = [PUBLISHED]
  ): Vegetable

  """
  Unpublish one vegetable from selected stages. Unpublish either the complete
  document with its relations, localizations and base data or specific
  localizations only.
  """
  unpublishVegetable(
    """Document to unpublish"""
    where: VegetableWhereUniqueInput!

    """Stages to unpublish document from"""
    from: [Stage!]! = [PUBLISHED]
  ): Vegetable

  """Update many Vegetable documents"""
  updateManyVegetablesConnection(
    """Documents to apply update on"""
    where: VegetableManyWhereInput

    """Updates to document content"""
    data: VegetableUpdateManyInput!
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): VegetableConnection!

  """Delete many Vegetable documents, return deleted documents"""
  deleteManyVegetablesConnection(
    """Documents to delete"""
    where: VegetableManyWhereInput
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): VegetableConnection!

  """Publish many Vegetable documents"""
  publishManyVegetablesConnection(
    """Identifies documents in each stage to be published"""
    where: VegetableManyWhereInput

    """Stage to find matching documents in"""
    from: Stage = DRAFT

    """Stages to publish documents to"""
    to: [Stage!]! = [PUBLISHED]
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): VegetableConnection!

  """
  Find many Vegetable documents that match criteria in specified stage and unpublish from target stages
  """
  unpublishManyVegetablesConnection(
    """Identifies documents in draft stage"""
    where: VegetableManyWhereInput

    """Stage to find matching documents in"""
    stage: Stage = DRAFT

    """Stages to unpublish documents from"""
    from: [Stage!]! = [PUBLISHED]
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): VegetableConnection!

  """Update many vegetables"""
  updateManyVegetables(
    """Documents to apply update on"""
    where: VegetableManyWhereInput

    """Updates to document content"""
    data: VegetableUpdateManyInput!
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (updateManyVegetablesConnection)")

  """Delete many Vegetable documents"""
  deleteManyVegetables(
    """Documents to delete"""
    where: VegetableManyWhereInput
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (deleteManyVegetablesConnection)")

  """Publish many Vegetable documents"""
  publishManyVegetables(
    """Identifies documents in each stage to be published"""
    where: VegetableManyWhereInput

    """Stages to publish documents to"""
    to: [Stage!]! = [PUBLISHED]
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (publishManyVegetablesConnection)")

  """Unpublish many Vegetable documents"""
  unpublishManyVegetables(
    """Identifies documents in each stage"""
    where: VegetableManyWhereInput

    """Stages to unpublish documents from"""
    from: [Stage!]! = [PUBLISHED]
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (unpublishManyVegetablesConnection)")
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!

  """The Stage of an object"""
  stage: Stage!
}

type Oil implements Node {
  """System stage field"""
  stage: Stage!

  """Get the document in other stages"""
  documentInStages(
    """Potential stages that should be returned"""
    stages: [Stage!]! = [PUBLISHED, DRAFT]

    """Decides if the current stage should be included or not"""
    includeCurrent: Boolean! = false

    """
    Decides if the documents should match the parent documents locale or should use the fallback order defined in the tree
    """
    inheritLocale: Boolean! = false
  ): [Oil!]!

  """The unique identifier"""
  id: ID!

  """The time the document was created"""
  createdAt: DateTime!

  """The time the document was updated"""
  updatedAt: DateTime!

  """The time the document was published. Null on documents in draft stage."""
  publishedAt: DateTime
  title: String
  pizza(skip: Int, after: String, before: String, first: Int, last: Int): [Pizza!]!

  """List of Oil versions"""
  history(
    limit: Int! = 10
    skip: Int! = 0

    """
    This is optional and can be used to fetch the document version history for a specific stage instead of the current one
    """
    stageOverride: Stage
  ): [Version!]!
}

input OilConnectInput {
  """Document to connect"""
  where: OilWhereUniqueInput!

  """
  Allow to specify document position in list of connected documents, will default to appending at end of list
  """
  position: ConnectPositionInput
}

"""A connection to a list of items."""
type OilConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [OilEdge!]!
  aggregate: Aggregate!
}

input OilCreateInput {
  createdAt: DateTime
  updatedAt: DateTime
  title: String
  pizza: PizzaCreateManyInlineInput
}

input OilCreateManyInlineInput {
  """Create and connect multiple existing Oil documents"""
  create: [OilCreateInput!]

  """Connect multiple existing Oil documents"""
  connect: [OilWhereUniqueInput!]
}

input OilCreateOneInlineInput {
  """Create and connect one Oil document"""
  create: OilCreateInput

  """Connect one existing Oil document"""
  connect: OilWhereUniqueInput
}

"""An edge in a connection."""
type OilEdge {
  """The item at the end of the edge."""
  node: Oil!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Identifies documents"""
input OilManyWhereInput {
  """Contains search across all appropriate fields."""
  _search: String

  """Logical AND on all given filters."""
  AND: [OilWhereInput!]

  """Logical OR on all given filters."""
  OR: [OilWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [OilWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  publishedAt: DateTime

  """All values that are not equal to given value."""
  publishedAt_not: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime!]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string"""
  title_not_ends_with: String
}

enum OilOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  publishedAt_ASC
  publishedAt_DESC
  title_ASC
  title_DESC
}

input OilUpdateInput {
  title: String
  pizza: PizzaUpdateManyInlineInput
}

input OilUpdateManyInlineInput {
  """Create and connect multiple Oil documents"""
  create: [OilCreateInput!]

  """Connect multiple existing Oil documents"""
  connect: [OilConnectInput!]

  """
  Override currently-connected documents with multiple existing Oil documents
  """
  set: [OilWhereUniqueInput!]

  """Update multiple Oil documents"""
  update: [OilUpdateWithNestedWhereUniqueInput!]

  """Upsert multiple Oil documents"""
  upsert: [OilUpsertWithNestedWhereUniqueInput!]

  """Disconnect multiple Oil documents"""
  disconnect: [OilWhereUniqueInput!]

  """Delete multiple Oil documents"""
  delete: [OilWhereUniqueInput!]
}

input OilUpdateManyInput {
  title: String
}

input OilUpdateManyWithNestedWhereInput {
  """Document search"""
  where: OilWhereInput!

  """Update many input"""
  data: OilUpdateManyInput!
}

input OilUpdateOneInlineInput {
  """Create and connect one Oil document"""
  create: OilCreateInput

  """Update single Oil document"""
  update: OilUpdateWithNestedWhereUniqueInput

  """Upsert single Oil document"""
  upsert: OilUpsertWithNestedWhereUniqueInput

  """Connect existing Oil document"""
  connect: OilWhereUniqueInput

  """Disconnect currently connected Oil document"""
  disconnect: Boolean

  """Delete currently connected Oil document"""
  delete: Boolean
}

input OilUpdateWithNestedWhereUniqueInput {
  """Unique document search"""
  where: OilWhereUniqueInput!

  """Document to update"""
  data: OilUpdateInput!
}

input OilUpsertInput {
  """Create document if it didn't exist"""
  create: OilCreateInput!

  """Update document if it exists"""
  update: OilUpdateInput!
}

input OilUpsertWithNestedWhereUniqueInput {
  """Unique document search"""
  where: OilWhereUniqueInput!

  """Upsert data"""
  data: OilUpsertInput!
}

"""Identifies documents"""
input OilWhereInput {
  """Contains search across all appropriate fields."""
  _search: String

  """Logical AND on all given filters."""
  AND: [OilWhereInput!]

  """Logical OR on all given filters."""
  OR: [OilWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [OilWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  publishedAt: DateTime

  """All values that are not equal to given value."""
  publishedAt_not: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime!]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string"""
  title_not_ends_with: String
}

"""References Oil record uniquely"""
input OilWhereUniqueInput {
  id: ID
}

type Order implements Node {
  """System stage field"""
  stage: Stage!

  """Get the document in other stages"""
  documentInStages(
    """Potential stages that should be returned"""
    stages: [Stage!]! = [PUBLISHED, DRAFT]

    """Decides if the current stage should be included or not"""
    includeCurrent: Boolean! = false

    """
    Decides if the documents should match the parent documents locale or should use the fallback order defined in the tree
    """
    inheritLocale: Boolean! = false
  ): [Order!]!

  """The unique identifier"""
  id: ID!

  """The time the document was created"""
  createdAt: DateTime!

  """The time the document was updated"""
  updatedAt: DateTime!

  """The time the document was published. Null on documents in draft stage."""
  publishedAt: DateTime
  pizzas(where: PizzaWhereInput, orderBy: PizzaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Pizza!]!

  """List of Order versions"""
  history(
    limit: Int! = 10
    skip: Int! = 0

    """
    This is optional and can be used to fetch the document version history for a specific stage instead of the current one
    """
    stageOverride: Stage
  ): [Version!]!
}

input OrderConnectInput {
  """Document to connect"""
  where: OrderWhereUniqueInput!

  """
  Allow to specify document position in list of connected documents, will default to appending at end of list
  """
  position: ConnectPositionInput
}

"""A connection to a list of items."""
type OrderConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [OrderEdge!]!
  aggregate: Aggregate!
}

input OrderCreateInput {
  createdAt: DateTime
  updatedAt: DateTime
  pizzas: PizzaCreateManyInlineInput
}

input OrderCreateManyInlineInput {
  """Create and connect multiple existing Order documents"""
  create: [OrderCreateInput!]

  """Connect multiple existing Order documents"""
  connect: [OrderWhereUniqueInput!]
}

input OrderCreateOneInlineInput {
  """Create and connect one Order document"""
  create: OrderCreateInput

  """Connect one existing Order document"""
  connect: OrderWhereUniqueInput
}

"""An edge in a connection."""
type OrderEdge {
  """The item at the end of the edge."""
  node: Order!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Identifies documents"""
input OrderManyWhereInput {
  """Contains search across all appropriate fields."""
  _search: String

  """Logical AND on all given filters."""
  AND: [OrderWhereInput!]

  """Logical OR on all given filters."""
  OR: [OrderWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [OrderWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  publishedAt: DateTime

  """All values that are not equal to given value."""
  publishedAt_not: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime!]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime
  pizzas_every: PizzaWhereInput
  pizzas_some: PizzaWhereInput
  pizzas_none: PizzaWhereInput
}

enum OrderOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  publishedAt_ASC
  publishedAt_DESC
}

input OrderUpdateInput {
  pizzas: PizzaUpdateManyInlineInput
}

input OrderUpdateManyInlineInput {
  """Create and connect multiple Order documents"""
  create: [OrderCreateInput!]

  """Connect multiple existing Order documents"""
  connect: [OrderConnectInput!]

  """
  Override currently-connected documents with multiple existing Order documents
  """
  set: [OrderWhereUniqueInput!]

  """Update multiple Order documents"""
  update: [OrderUpdateWithNestedWhereUniqueInput!]

  """Upsert multiple Order documents"""
  upsert: [OrderUpsertWithNestedWhereUniqueInput!]

  """Disconnect multiple Order documents"""
  disconnect: [OrderWhereUniqueInput!]

  """Delete multiple Order documents"""
  delete: [OrderWhereUniqueInput!]
}

input OrderUpdateManyInput {
  """No fields in updateMany data input"""
  _: String
}

input OrderUpdateManyWithNestedWhereInput {
  """Document search"""
  where: OrderWhereInput!

  """Update many input"""
  data: OrderUpdateManyInput!
}

input OrderUpdateOneInlineInput {
  """Create and connect one Order document"""
  create: OrderCreateInput

  """Update single Order document"""
  update: OrderUpdateWithNestedWhereUniqueInput

  """Upsert single Order document"""
  upsert: OrderUpsertWithNestedWhereUniqueInput

  """Connect existing Order document"""
  connect: OrderWhereUniqueInput

  """Disconnect currently connected Order document"""
  disconnect: Boolean

  """Delete currently connected Order document"""
  delete: Boolean
}

input OrderUpdateWithNestedWhereUniqueInput {
  """Unique document search"""
  where: OrderWhereUniqueInput!

  """Document to update"""
  data: OrderUpdateInput!
}

input OrderUpsertInput {
  """Create document if it didn't exist"""
  create: OrderCreateInput!

  """Update document if it exists"""
  update: OrderUpdateInput!
}

input OrderUpsertWithNestedWhereUniqueInput {
  """Unique document search"""
  where: OrderWhereUniqueInput!

  """Upsert data"""
  data: OrderUpsertInput!
}

"""Identifies documents"""
input OrderWhereInput {
  """Contains search across all appropriate fields."""
  _search: String

  """Logical AND on all given filters."""
  AND: [OrderWhereInput!]

  """Logical OR on all given filters."""
  OR: [OrderWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [OrderWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  publishedAt: DateTime

  """All values that are not equal to given value."""
  publishedAt_not: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime!]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime
  pizzas_every: PizzaWhereInput
  pizzas_some: PizzaWhereInput
  pizzas_none: PizzaWhereInput
}

"""References Order record uniquely"""
input OrderWhereUniqueInput {
  id: ID
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """Number of items in the current page."""
  pageSize: Int
}

type Pizza implements Node {
  """System stage field"""
  stage: Stage!

  """Get the document in other stages"""
  documentInStages(
    """Potential stages that should be returned"""
    stages: [Stage!]! = [PUBLISHED, DRAFT]

    """Decides if the current stage should be included or not"""
    includeCurrent: Boolean! = false

    """
    Decides if the documents should match the parent documents locale or should use the fallback order defined in the tree
    """
    inheritLocale: Boolean! = false
  ): [Pizza!]!

  """The unique identifier"""
  id: ID!

  """The time the document was created"""
  createdAt: DateTime!

  """The time the document was updated"""
  updatedAt: DateTime!

  """The time the document was published. Null on documents in draft stage."""
  publishedAt: DateTime
  image(where: AssetWhereInput, orderBy: AssetOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Asset!]!
  title: String
  crust: Crust
  sauce: Sauce
  toppings(skip: Int, after: String, before: String, first: Int, last: Int): [PizzaToppings!]!
  cheese(where: CheeseWhereInput, orderBy: CheeseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Cheese!]!
  orders(where: OrderWhereInput, orderBy: OrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Order!]!

  """List of Pizza versions"""
  history(
    limit: Int! = 10
    skip: Int! = 0

    """
    This is optional and can be used to fetch the document version history for a specific stage instead of the current one
    """
    stageOverride: Stage
  ): [Version!]!
}

input PizzaConnectInput {
  """Document to connect"""
  where: PizzaWhereUniqueInput!

  """
  Allow to specify document position in list of connected documents, will default to appending at end of list
  """
  position: ConnectPositionInput
}

"""A connection to a list of items."""
type PizzaConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PizzaEdge!]!
  aggregate: Aggregate!
}

input PizzaCreateInput {
  createdAt: DateTime
  updatedAt: DateTime
  image: AssetCreateManyInlineInput
  title: String
  crust: CrustCreateOneInlineInput
  sauce: SauceCreateOneInlineInput
  toppings: PizzaToppingsCreateManyInlineInput
  cheese: CheeseCreateManyInlineInput
  orders: OrderCreateManyInlineInput
}

input PizzaCreateManyInlineInput {
  """Create and connect multiple existing Pizza documents"""
  create: [PizzaCreateInput!]

  """Connect multiple existing Pizza documents"""
  connect: [PizzaWhereUniqueInput!]
}

input PizzaCreateOneInlineInput {
  """Create and connect one Pizza document"""
  create: PizzaCreateInput

  """Connect one existing Pizza document"""
  connect: PizzaWhereUniqueInput
}

"""An edge in a connection."""
type PizzaEdge {
  """The item at the end of the edge."""
  node: Pizza!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Identifies documents"""
input PizzaManyWhereInput {
  """Contains search across all appropriate fields."""
  _search: String

  """Logical AND on all given filters."""
  AND: [PizzaWhereInput!]

  """Logical OR on all given filters."""
  OR: [PizzaWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PizzaWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  publishedAt: DateTime

  """All values that are not equal to given value."""
  publishedAt_not: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime!]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime
  image_every: AssetWhereInput
  image_some: AssetWhereInput
  image_none: AssetWhereInput
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string"""
  title_not_ends_with: String
  crust: CrustWhereInput
  sauce: SauceWhereInput
  cheese_every: CheeseWhereInput
  cheese_some: CheeseWhereInput
  cheese_none: CheeseWhereInput
  orders_every: OrderWhereInput
  orders_some: OrderWhereInput
  orders_none: OrderWhereInput
}

enum PizzaOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  publishedAt_ASC
  publishedAt_DESC
  title_ASC
  title_DESC
}

union PizzaToppings = Meat | Fruit | Oil | Vegetable | Fungus

input PizzaToppingsConnectInput {
  Meat: MeatConnectInput
  Fruit: FruitConnectInput
  Oil: OilConnectInput
  Vegetable: VegetableConnectInput
  Fungus: FungusConnectInput
}

input PizzaToppingsCreateInput {
  Meat: MeatCreateInput
  Fruit: FruitCreateInput
  Oil: OilCreateInput
  Vegetable: VegetableCreateInput
  Fungus: FungusCreateInput
}

input PizzaToppingsCreateManyInlineInput {
  """Create and connect multiple existing PizzaToppings documents"""
  create: [PizzaToppingsCreateInput!]

  """Connect multiple existing PizzaToppings documents"""
  connect: [PizzaToppingsWhereUniqueInput!]
}

input PizzaToppingsCreateOneInlineInput {
  """Create and connect one PizzaToppings document"""
  create: PizzaToppingsCreateInput

  """Connect one existing PizzaToppings document"""
  connect: PizzaToppingsWhereUniqueInput
}

input PizzaToppingsUpdateInput {
  Meat: MeatUpdateInput
  Fruit: FruitUpdateInput
  Oil: OilUpdateInput
  Vegetable: VegetableUpdateInput
  Fungus: FungusUpdateInput
}

input PizzaToppingsUpdateManyInlineInput {
  """Create and connect multiple PizzaToppings documents"""
  create: [PizzaToppingsCreateInput!]

  """Connect multiple existing PizzaToppings documents"""
  connect: [PizzaToppingsConnectInput!]

  """
  Override currently-connected documents with multiple existing PizzaToppings documents
  """
  set: [PizzaToppingsWhereUniqueInput!]

  """Update multiple PizzaToppings documents"""
  update: [PizzaToppingsUpdateWithNestedWhereUniqueInput!]

  """Upsert multiple PizzaToppings documents"""
  upsert: [PizzaToppingsUpsertWithNestedWhereUniqueInput!]

  """Disconnect multiple PizzaToppings documents"""
  disconnect: [PizzaToppingsWhereUniqueInput!]

  """Delete multiple PizzaToppings documents"""
  delete: [PizzaToppingsWhereUniqueInput!]
}

input PizzaToppingsUpdateManyWithNestedWhereInput {
  Meat: MeatUpdateManyWithNestedWhereInput
  Fruit: FruitUpdateManyWithNestedWhereInput
  Oil: OilUpdateManyWithNestedWhereInput
  Vegetable: VegetableUpdateManyWithNestedWhereInput
  Fungus: FungusUpdateManyWithNestedWhereInput
}

input PizzaToppingsUpdateOneInlineInput {
  """Create and connect one PizzaToppings document"""
  create: PizzaToppingsCreateInput

  """Update single PizzaToppings document"""
  update: PizzaToppingsUpdateWithNestedWhereUniqueInput

  """Upsert single PizzaToppings document"""
  upsert: PizzaToppingsUpsertWithNestedWhereUniqueInput

  """Connect existing PizzaToppings document"""
  connect: PizzaToppingsWhereUniqueInput

  """Disconnect currently connected PizzaToppings document"""
  disconnect: Boolean

  """Delete currently connected PizzaToppings document"""
  delete: Boolean
}

input PizzaToppingsUpdateWithNestedWhereUniqueInput {
  Meat: MeatUpdateWithNestedWhereUniqueInput
  Fruit: FruitUpdateWithNestedWhereUniqueInput
  Oil: OilUpdateWithNestedWhereUniqueInput
  Vegetable: VegetableUpdateWithNestedWhereUniqueInput
  Fungus: FungusUpdateWithNestedWhereUniqueInput
}

input PizzaToppingsUpsertWithNestedWhereUniqueInput {
  Meat: MeatUpsertWithNestedWhereUniqueInput
  Fruit: FruitUpsertWithNestedWhereUniqueInput
  Oil: OilUpsertWithNestedWhereUniqueInput
  Vegetable: VegetableUpsertWithNestedWhereUniqueInput
  Fungus: FungusUpsertWithNestedWhereUniqueInput
}

input PizzaToppingsWhereInput {
  Meat: MeatWhereInput
  Fruit: FruitWhereInput
  Oil: OilWhereInput
  Vegetable: VegetableWhereInput
  Fungus: FungusWhereInput
}

input PizzaToppingsWhereUniqueInput {
  Meat: MeatWhereUniqueInput
  Fruit: FruitWhereUniqueInput
  Oil: OilWhereUniqueInput
  Vegetable: VegetableWhereUniqueInput
  Fungus: FungusWhereUniqueInput
}

input PizzaUpdateInput {
  image: AssetUpdateManyInlineInput
  title: String
  crust: CrustUpdateOneInlineInput
  sauce: SauceUpdateOneInlineInput
  toppings: PizzaToppingsUpdateManyInlineInput
  cheese: CheeseUpdateManyInlineInput
  orders: OrderUpdateManyInlineInput
}

input PizzaUpdateManyInlineInput {
  """Create and connect multiple Pizza documents"""
  create: [PizzaCreateInput!]

  """Connect multiple existing Pizza documents"""
  connect: [PizzaConnectInput!]

  """
  Override currently-connected documents with multiple existing Pizza documents
  """
  set: [PizzaWhereUniqueInput!]

  """Update multiple Pizza documents"""
  update: [PizzaUpdateWithNestedWhereUniqueInput!]

  """Upsert multiple Pizza documents"""
  upsert: [PizzaUpsertWithNestedWhereUniqueInput!]

  """Disconnect multiple Pizza documents"""
  disconnect: [PizzaWhereUniqueInput!]

  """Delete multiple Pizza documents"""
  delete: [PizzaWhereUniqueInput!]
}

input PizzaUpdateManyInput {
  """No fields in updateMany data input"""
  _: String
}

input PizzaUpdateManyWithNestedWhereInput {
  """Document search"""
  where: PizzaWhereInput!

  """Update many input"""
  data: PizzaUpdateManyInput!
}

input PizzaUpdateOneInlineInput {
  """Create and connect one Pizza document"""
  create: PizzaCreateInput

  """Update single Pizza document"""
  update: PizzaUpdateWithNestedWhereUniqueInput

  """Upsert single Pizza document"""
  upsert: PizzaUpsertWithNestedWhereUniqueInput

  """Connect existing Pizza document"""
  connect: PizzaWhereUniqueInput

  """Disconnect currently connected Pizza document"""
  disconnect: Boolean

  """Delete currently connected Pizza document"""
  delete: Boolean
}

input PizzaUpdateWithNestedWhereUniqueInput {
  """Unique document search"""
  where: PizzaWhereUniqueInput!

  """Document to update"""
  data: PizzaUpdateInput!
}

input PizzaUpsertInput {
  """Create document if it didn't exist"""
  create: PizzaCreateInput!

  """Update document if it exists"""
  update: PizzaUpdateInput!
}

input PizzaUpsertWithNestedWhereUniqueInput {
  """Unique document search"""
  where: PizzaWhereUniqueInput!

  """Upsert data"""
  data: PizzaUpsertInput!
}

"""Identifies documents"""
input PizzaWhereInput {
  """Contains search across all appropriate fields."""
  _search: String

  """Logical AND on all given filters."""
  AND: [PizzaWhereInput!]

  """Logical OR on all given filters."""
  OR: [PizzaWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PizzaWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  publishedAt: DateTime

  """All values that are not equal to given value."""
  publishedAt_not: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime!]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime
  image_every: AssetWhereInput
  image_some: AssetWhereInput
  image_none: AssetWhereInput
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string"""
  title_not_ends_with: String
  crust: CrustWhereInput
  sauce: SauceWhereInput
  cheese_every: CheeseWhereInput
  cheese_some: CheeseWhereInput
  cheese_none: CheeseWhereInput
  orders_every: OrderWhereInput
  orders_some: OrderWhereInput
  orders_none: OrderWhereInput
}

"""References Pizza record uniquely"""
input PizzaWhereUniqueInput {
  id: ID
  title: String
}

input PublishLocaleInput {
  """Locales to publish"""
  locale: Locale!

  """Stages to publish selected locales to"""
  stages: [Stage!]!
}

type Query {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
    stage: Stage! = PUBLISHED

    """First locale matched will be used based on the order of this input"""
    locales: [Locale!]! = [en]
  ): Node

  """Retrieve multiple assets"""
  assets(
    where: AssetWhereInput
    orderBy: AssetOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED

    """First locale matched will be used based on the order of this input"""
    locales: [Locale!]! = [en]
  ): [Asset!]!

  """Retrieve a single asset"""
  asset(
    where: AssetWhereUniqueInput!
    stage: Stage! = PUBLISHED

    """First locale matched will be used based on the order of this input"""
    locales: [Locale!]! = [en]
  ): Asset

  """Retrieve multiple assets using the Relay connection interface"""
  assetsConnection(
    where: AssetWhereInput
    orderBy: AssetOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED

    """First locale matched will be used based on the order of this input"""
    locales: [Locale!]! = [en]
  ): AssetConnection!

  """Retrieve document version"""
  assetVersion(where: VersionWhereInput!): DocumentVersion

  """Retrieve multiple cheeses"""
  cheeses(where: CheeseWhereInput, orderBy: CheeseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int, stage: Stage! = PUBLISHED): [Cheese!]!

  """Retrieve a single cheese"""
  cheese(where: CheeseWhereUniqueInput!, stage: Stage! = PUBLISHED): Cheese

  """Retrieve multiple cheeses using the Relay connection interface"""
  cheesesConnection(where: CheeseWhereInput, orderBy: CheeseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int, stage: Stage! = PUBLISHED): CheeseConnection!

  """Retrieve document version"""
  cheeseVersion(where: VersionWhereInput!): DocumentVersion

  """Retrieve multiple crusts"""
  crusts(where: CrustWhereInput, orderBy: CrustOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int, stage: Stage! = PUBLISHED): [Crust!]!

  """Retrieve a single crust"""
  crust(where: CrustWhereUniqueInput!, stage: Stage! = PUBLISHED): Crust

  """Retrieve multiple crusts using the Relay connection interface"""
  crustsConnection(where: CrustWhereInput, orderBy: CrustOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int, stage: Stage! = PUBLISHED): CrustConnection!

  """Retrieve document version"""
  crustVersion(where: VersionWhereInput!): DocumentVersion

  """Retrieve multiple fruits"""
  fruits(where: FruitWhereInput, orderBy: FruitOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int, stage: Stage! = PUBLISHED): [Fruit!]!

  """Retrieve a single fruit"""
  fruit(where: FruitWhereUniqueInput!, stage: Stage! = PUBLISHED): Fruit

  """Retrieve multiple fruits using the Relay connection interface"""
  fruitsConnection(where: FruitWhereInput, orderBy: FruitOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int, stage: Stage! = PUBLISHED): FruitConnection!

  """Retrieve document version"""
  fruitVersion(where: VersionWhereInput!): DocumentVersion

  """Retrieve multiple fungi"""
  fungi(where: FungusWhereInput, orderBy: FungusOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int, stage: Stage! = PUBLISHED): [Fungus!]!

  """Retrieve a single fungus"""
  fungus(where: FungusWhereUniqueInput!, stage: Stage! = PUBLISHED): Fungus

  """Retrieve multiple fungi using the Relay connection interface"""
  fungiConnection(where: FungusWhereInput, orderBy: FungusOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int, stage: Stage! = PUBLISHED): FungusConnection!

  """Retrieve document version"""
  fungusVersion(where: VersionWhereInput!): DocumentVersion

  """Retrieve multiple meats"""
  meats(where: MeatWhereInput, orderBy: MeatOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int, stage: Stage! = PUBLISHED): [Meat!]!

  """Retrieve a single meat"""
  meat(where: MeatWhereUniqueInput!, stage: Stage! = PUBLISHED): Meat

  """Retrieve multiple meats using the Relay connection interface"""
  meatsConnection(where: MeatWhereInput, orderBy: MeatOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int, stage: Stage! = PUBLISHED): MeatConnection!

  """Retrieve document version"""
  meatVersion(where: VersionWhereInput!): DocumentVersion

  """Retrieve multiple oils"""
  oils(where: OilWhereInput, orderBy: OilOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int, stage: Stage! = PUBLISHED): [Oil!]!

  """Retrieve a single oil"""
  oil(where: OilWhereUniqueInput!, stage: Stage! = PUBLISHED): Oil

  """Retrieve multiple oils using the Relay connection interface"""
  oilsConnection(where: OilWhereInput, orderBy: OilOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int, stage: Stage! = PUBLISHED): OilConnection!

  """Retrieve document version"""
  oilVersion(where: VersionWhereInput!): DocumentVersion

  """Retrieve multiple orders"""
  orders(where: OrderWhereInput, orderBy: OrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int, stage: Stage! = PUBLISHED): [Order!]!

  """Retrieve a single order"""
  order(where: OrderWhereUniqueInput!, stage: Stage! = PUBLISHED): Order

  """Retrieve multiple orders using the Relay connection interface"""
  ordersConnection(where: OrderWhereInput, orderBy: OrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int, stage: Stage! = PUBLISHED): OrderConnection!

  """Retrieve document version"""
  orderVersion(where: VersionWhereInput!): DocumentVersion

  """Retrieve multiple pizzas"""
  pizzas(where: PizzaWhereInput, orderBy: PizzaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int, stage: Stage! = PUBLISHED): [Pizza!]!

  """Retrieve a single pizza"""
  pizza(where: PizzaWhereUniqueInput!, stage: Stage! = PUBLISHED): Pizza

  """Retrieve multiple pizzas using the Relay connection interface"""
  pizzasConnection(where: PizzaWhereInput, orderBy: PizzaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int, stage: Stage! = PUBLISHED): PizzaConnection!

  """Retrieve document version"""
  pizzaVersion(where: VersionWhereInput!): DocumentVersion

  """Retrieve multiple sauces"""
  sauces(where: SauceWhereInput, orderBy: SauceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int, stage: Stage! = PUBLISHED): [Sauce!]!

  """Retrieve a single sauce"""
  sauce(where: SauceWhereUniqueInput!, stage: Stage! = PUBLISHED): Sauce

  """Retrieve multiple sauces using the Relay connection interface"""
  saucesConnection(where: SauceWhereInput, orderBy: SauceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int, stage: Stage! = PUBLISHED): SauceConnection!

  """Retrieve document version"""
  sauceVersion(where: VersionWhereInput!): DocumentVersion

  """Retrieve multiple vegetables"""
  vegetables(where: VegetableWhereInput, orderBy: VegetableOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int, stage: Stage! = PUBLISHED): [Vegetable!]!

  """Retrieve a single vegetable"""
  vegetable(where: VegetableWhereUniqueInput!, stage: Stage! = PUBLISHED): Vegetable

  """Retrieve multiple vegetables using the Relay connection interface"""
  vegetablesConnection(where: VegetableWhereInput, orderBy: VegetableOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int, stage: Stage! = PUBLISHED): VegetableConnection!

  """Retrieve document version"""
  vegetableVersion(where: VersionWhereInput!): DocumentVersion
}

"""
Representing a RGBA color value: https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#rgb()_and_rgba()
"""
type RGBA {
  r: RGBAHue!
  g: RGBAHue!
  b: RGBAHue!
  a: RGBATransparency!
}

scalar RGBAHue

"""
Input type representing a RGBA color value: https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#rgb()_and_rgba()
"""
input RGBAInput {
  r: RGBAHue!
  g: RGBAHue!
  b: RGBAHue!
  a: RGBATransparency!
}

scalar RGBATransparency

"""
Custom type representing a rich text value comprising of raw rich text ast, html, markdown and text values
"""
type RichText {
  """Returns AST representation"""
  raw: RichTextAST!

  """Returns HTMl representation"""
  html: String!

  """Returns Markdown representation"""
  markdown: String!

  """Returns plain-text contents of RichText"""
  text: String!
}

"""Slate-compatible RichText AST"""
scalar RichTextAST

type Sauce implements Node {
  """System stage field"""
  stage: Stage!

  """Get the document in other stages"""
  documentInStages(
    """Potential stages that should be returned"""
    stages: [Stage!]! = [PUBLISHED, DRAFT]

    """Decides if the current stage should be included or not"""
    includeCurrent: Boolean! = false

    """
    Decides if the documents should match the parent documents locale or should use the fallback order defined in the tree
    """
    inheritLocale: Boolean! = false
  ): [Sauce!]!

  """The unique identifier"""
  id: ID!

  """The time the document was created"""
  createdAt: DateTime!

  """The time the document was updated"""
  updatedAt: DateTime!

  """The time the document was published. Null on documents in draft stage."""
  publishedAt: DateTime
  pizza(where: PizzaWhereInput, orderBy: PizzaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Pizza!]!
  title: String

  """List of Sauce versions"""
  history(
    limit: Int! = 10
    skip: Int! = 0

    """
    This is optional and can be used to fetch the document version history for a specific stage instead of the current one
    """
    stageOverride: Stage
  ): [Version!]!
}

input SauceConnectInput {
  """Document to connect"""
  where: SauceWhereUniqueInput!

  """
  Allow to specify document position in list of connected documents, will default to appending at end of list
  """
  position: ConnectPositionInput
}

"""A connection to a list of items."""
type SauceConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SauceEdge!]!
  aggregate: Aggregate!
}

input SauceCreateInput {
  createdAt: DateTime
  updatedAt: DateTime
  pizza: PizzaCreateManyInlineInput
  title: String
}

input SauceCreateManyInlineInput {
  """Create and connect multiple existing Sauce documents"""
  create: [SauceCreateInput!]

  """Connect multiple existing Sauce documents"""
  connect: [SauceWhereUniqueInput!]
}

input SauceCreateOneInlineInput {
  """Create and connect one Sauce document"""
  create: SauceCreateInput

  """Connect one existing Sauce document"""
  connect: SauceWhereUniqueInput
}

"""An edge in a connection."""
type SauceEdge {
  """The item at the end of the edge."""
  node: Sauce!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Identifies documents"""
input SauceManyWhereInput {
  """Contains search across all appropriate fields."""
  _search: String

  """Logical AND on all given filters."""
  AND: [SauceWhereInput!]

  """Logical OR on all given filters."""
  OR: [SauceWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SauceWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  publishedAt: DateTime

  """All values that are not equal to given value."""
  publishedAt_not: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime!]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime
  pizza_every: PizzaWhereInput
  pizza_some: PizzaWhereInput
  pizza_none: PizzaWhereInput
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string"""
  title_not_ends_with: String
}

enum SauceOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  publishedAt_ASC
  publishedAt_DESC
  title_ASC
  title_DESC
}

input SauceUpdateInput {
  pizza: PizzaUpdateManyInlineInput
  title: String
}

input SauceUpdateManyInlineInput {
  """Create and connect multiple Sauce documents"""
  create: [SauceCreateInput!]

  """Connect multiple existing Sauce documents"""
  connect: [SauceConnectInput!]

  """
  Override currently-connected documents with multiple existing Sauce documents
  """
  set: [SauceWhereUniqueInput!]

  """Update multiple Sauce documents"""
  update: [SauceUpdateWithNestedWhereUniqueInput!]

  """Upsert multiple Sauce documents"""
  upsert: [SauceUpsertWithNestedWhereUniqueInput!]

  """Disconnect multiple Sauce documents"""
  disconnect: [SauceWhereUniqueInput!]

  """Delete multiple Sauce documents"""
  delete: [SauceWhereUniqueInput!]
}

input SauceUpdateManyInput {
  title: String
}

input SauceUpdateManyWithNestedWhereInput {
  """Document search"""
  where: SauceWhereInput!

  """Update many input"""
  data: SauceUpdateManyInput!
}

input SauceUpdateOneInlineInput {
  """Create and connect one Sauce document"""
  create: SauceCreateInput

  """Update single Sauce document"""
  update: SauceUpdateWithNestedWhereUniqueInput

  """Upsert single Sauce document"""
  upsert: SauceUpsertWithNestedWhereUniqueInput

  """Connect existing Sauce document"""
  connect: SauceWhereUniqueInput

  """Disconnect currently connected Sauce document"""
  disconnect: Boolean

  """Delete currently connected Sauce document"""
  delete: Boolean
}

input SauceUpdateWithNestedWhereUniqueInput {
  """Unique document search"""
  where: SauceWhereUniqueInput!

  """Document to update"""
  data: SauceUpdateInput!
}

input SauceUpsertInput {
  """Create document if it didn't exist"""
  create: SauceCreateInput!

  """Update document if it exists"""
  update: SauceUpdateInput!
}

input SauceUpsertWithNestedWhereUniqueInput {
  """Unique document search"""
  where: SauceWhereUniqueInput!

  """Upsert data"""
  data: SauceUpsertInput!
}

"""Identifies documents"""
input SauceWhereInput {
  """Contains search across all appropriate fields."""
  _search: String

  """Logical AND on all given filters."""
  AND: [SauceWhereInput!]

  """Logical OR on all given filters."""
  OR: [SauceWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SauceWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  publishedAt: DateTime

  """All values that are not equal to given value."""
  publishedAt_not: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime!]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime
  pizza_every: PizzaWhereInput
  pizza_some: PizzaWhereInput
  pizza_none: PizzaWhereInput
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string"""
  title_not_ends_with: String
}

"""References Sauce record uniquely"""
input SauceWhereUniqueInput {
  id: ID
}

"""Stage system enumeration"""
enum Stage {
  """The Published stage is where you can publish your content to."""
  PUBLISHED

  """The Draft is the default stage for all your content."""
  DRAFT
}

enum SystemDateTimeFieldVariation {
  BASE
  LOCALIZATION
  COMBINED
}

input UnpublishLocaleInput {
  """Locales to unpublish"""
  locale: Locale!

  """Stages to unpublish selected locales from"""
  stages: [Stage!]!
}

type Vegetable implements Node {
  """System stage field"""
  stage: Stage!

  """Get the document in other stages"""
  documentInStages(
    """Potential stages that should be returned"""
    stages: [Stage!]! = [PUBLISHED, DRAFT]

    """Decides if the current stage should be included or not"""
    includeCurrent: Boolean! = false

    """
    Decides if the documents should match the parent documents locale or should use the fallback order defined in the tree
    """
    inheritLocale: Boolean! = false
  ): [Vegetable!]!

  """The unique identifier"""
  id: ID!

  """The time the document was created"""
  createdAt: DateTime!

  """The time the document was updated"""
  updatedAt: DateTime!

  """The time the document was published. Null on documents in draft stage."""
  publishedAt: DateTime
  pizza(skip: Int, after: String, before: String, first: Int, last: Int): [Pizza!]!
  title: String

  """List of Vegetable versions"""
  history(
    limit: Int! = 10
    skip: Int! = 0

    """
    This is optional and can be used to fetch the document version history for a specific stage instead of the current one
    """
    stageOverride: Stage
  ): [Version!]!
}

input VegetableConnectInput {
  """Document to connect"""
  where: VegetableWhereUniqueInput!

  """
  Allow to specify document position in list of connected documents, will default to appending at end of list
  """
  position: ConnectPositionInput
}

"""A connection to a list of items."""
type VegetableConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [VegetableEdge!]!
  aggregate: Aggregate!
}

input VegetableCreateInput {
  createdAt: DateTime
  updatedAt: DateTime
  pizza: PizzaCreateManyInlineInput
  title: String
}

input VegetableCreateManyInlineInput {
  """Create and connect multiple existing Vegetable documents"""
  create: [VegetableCreateInput!]

  """Connect multiple existing Vegetable documents"""
  connect: [VegetableWhereUniqueInput!]
}

input VegetableCreateOneInlineInput {
  """Create and connect one Vegetable document"""
  create: VegetableCreateInput

  """Connect one existing Vegetable document"""
  connect: VegetableWhereUniqueInput
}

"""An edge in a connection."""
type VegetableEdge {
  """The item at the end of the edge."""
  node: Vegetable!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Identifies documents"""
input VegetableManyWhereInput {
  """Contains search across all appropriate fields."""
  _search: String

  """Logical AND on all given filters."""
  AND: [VegetableWhereInput!]

  """Logical OR on all given filters."""
  OR: [VegetableWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [VegetableWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  publishedAt: DateTime

  """All values that are not equal to given value."""
  publishedAt_not: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime!]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string"""
  title_not_ends_with: String
}

enum VegetableOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  publishedAt_ASC
  publishedAt_DESC
  title_ASC
  title_DESC
}

input VegetableUpdateInput {
  pizza: PizzaUpdateManyInlineInput
  title: String
}

input VegetableUpdateManyInlineInput {
  """Create and connect multiple Vegetable documents"""
  create: [VegetableCreateInput!]

  """Connect multiple existing Vegetable documents"""
  connect: [VegetableConnectInput!]

  """
  Override currently-connected documents with multiple existing Vegetable documents
  """
  set: [VegetableWhereUniqueInput!]

  """Update multiple Vegetable documents"""
  update: [VegetableUpdateWithNestedWhereUniqueInput!]

  """Upsert multiple Vegetable documents"""
  upsert: [VegetableUpsertWithNestedWhereUniqueInput!]

  """Disconnect multiple Vegetable documents"""
  disconnect: [VegetableWhereUniqueInput!]

  """Delete multiple Vegetable documents"""
  delete: [VegetableWhereUniqueInput!]
}

input VegetableUpdateManyInput {
  title: String
}

input VegetableUpdateManyWithNestedWhereInput {
  """Document search"""
  where: VegetableWhereInput!

  """Update many input"""
  data: VegetableUpdateManyInput!
}

input VegetableUpdateOneInlineInput {
  """Create and connect one Vegetable document"""
  create: VegetableCreateInput

  """Update single Vegetable document"""
  update: VegetableUpdateWithNestedWhereUniqueInput

  """Upsert single Vegetable document"""
  upsert: VegetableUpsertWithNestedWhereUniqueInput

  """Connect existing Vegetable document"""
  connect: VegetableWhereUniqueInput

  """Disconnect currently connected Vegetable document"""
  disconnect: Boolean

  """Delete currently connected Vegetable document"""
  delete: Boolean
}

input VegetableUpdateWithNestedWhereUniqueInput {
  """Unique document search"""
  where: VegetableWhereUniqueInput!

  """Document to update"""
  data: VegetableUpdateInput!
}

input VegetableUpsertInput {
  """Create document if it didn't exist"""
  create: VegetableCreateInput!

  """Update document if it exists"""
  update: VegetableUpdateInput!
}

input VegetableUpsertWithNestedWhereUniqueInput {
  """Unique document search"""
  where: VegetableWhereUniqueInput!

  """Upsert data"""
  data: VegetableUpsertInput!
}

"""Identifies documents"""
input VegetableWhereInput {
  """Contains search across all appropriate fields."""
  _search: String

  """Logical AND on all given filters."""
  AND: [VegetableWhereInput!]

  """Logical OR on all given filters."""
  OR: [VegetableWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [VegetableWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  publishedAt: DateTime

  """All values that are not equal to given value."""
  publishedAt_not: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime!]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string"""
  title_not_ends_with: String
}

"""References Vegetable record uniquely"""
input VegetableWhereUniqueInput {
  id: ID
}

type Version {
  id: ID!
  stage: Stage!
  revision: Int!
  createdAt: DateTime!
}

input VersionWhereInput {
  id: ID!
  stage: Stage!
  revision: Int!
}
